{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","state/index.js","service/user.service.js","utils/getWeb3.js","components/inbox/inbox.component.js","components/contracts/card/contract-card.component.js","components/contracts/contracts.component.js","components/header/header.component.js","components/sidebar/sidebar.container.js","App.js","serviceWorker.js","index.js","encryption/encrypt.service.js","constants.js","ipfs.js","db/ipfs.db.js","components/generateAlias/generateAlias.component.js","components/upload/upload.component.js","components/upload/queue/upload-queue.component.js","resources/lock_icon.jpg","state/reducers/index.js","state/store/index.js","components/generateKeys/generateKeys.component.js","utils/encryption.utils.js","state/actions/index.js","service/contract.service.js","state/constants/action-types.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","window","store","loadUser","UserService","_loadUser2","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","accounts","alias","contract","wrap","_context","prev","next","this","loadAccounts","sent","findAlias","t0","String","fromCharCode","t1","t2","toConsumableArray","t3","Uint8Array","findContracts","t4","t5","t6","apply","call","console","log","dispatch","account","stop","_x","arguments","_loadAccounts","_callee2","_context2","eth","getAccounts","abrupt","_x2","_findAlias","_callee3","dir","filesResponse","content","_context3","aliasDirectory","IPFSDatabase","readFile","split","_x3","_findContracts","_callee4","_context4","contractDirectory","_x4","getEthereumBalance","_getEthereumBalance","_callee5","_context5","utils","getBalance","fromWei","_x5","_x6","getWeb3","Promise","reject","addEventListener","_web","provider","_web2","ethereum","Web3","currentProvider","enable","providers","HttpProvider","InboxComponent","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","encryptedInbox","uploadInbox","downloadPending","showInbox","user","readUploads","readInbox","item","filepath","uploadDirectory","filename","file","download","updateDownloadPendingState","inboxDirectory","sender","contractAddress","senderContractFileLoc","senderContractAddress","ContractService","createSharedKey","toString","sharedKey","EncryptionUtils","decrypt","decryptedMessage","data","type","require","lookup","blob","Blob","saveAs","setState","downloadPendingList","indexOfItem","findIndex","obj","ethereumAddress","inbox","index","indexOf","splice","deleteFile","err","res","items","readDirectory","parentResponse","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","done","senderRes","value","push","createData","name","subdir","senderResponse","_iterator3","_iteratorNormalCompletion3","_step3","childRes","fileView","target","_this2","react_default","createElement","className","ButtonGroup","Button","onClick","onToggleFileView","bind","react_fontawesome_index_es","icon","faUpload","length","faInbox","rc_if_else_es","condition","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","key","Spinner","color","onDownload","faDownload","onDelete","faTrashAlt","React","Component","ContractCardComponent","modal","deployingContract","onConfirm","toggle","cancel","Card","CardImg","width","src","headerImage","alt","contractName","CardBody","CardTitle","CardText","cardText","contractDeployed","Modal","isOpen","fade","ModalHeader","ModalBody","ModalFooter","confirm","ContractsComponent","contractCardText","generateKeys","contractResult","contractHandler","card_contract_card_component","LockImage","generateEncryptionKeysContract","ReactDOM","render","document","getElementById","HeaderComponent","accountsSelector","showAlert","i","_didIteratorError","_iteratorError","undefined","label","return","alert","navigator","clipboard","writeText","setTimeout","faBars","react_select_browser_esm","options","GenerateKeys","onChange","handleSelectAccount","copyText","faCopy","faLock","Alert","SidebarComponent","viewConstants","UPLOAD","toggleView","INBOX","faFileContract","CONTRACTS","App","componentDidMount","net","isListening","then","isWeb3Connected","catch","selectedView","subscribe","getState","ALIAS","updatedUser","event","view","upload_component","inbox_inbox_component","contracts_contracts_component","contractAddressHandler","generateAlias_component","aliasHandler","renderView","header_header_component","sidebar_sidebar_container","generateKeys_component","Boolean","location","hostname","match","es","src_App_0","serviceWorker","ready","registration","unregister","__webpack_require__","d","__webpack_exports__","tweetnacl__WEBPACK_IMPORTED_MODULE_0__","tweetnacl_util__WEBPACK_IMPORTED_MODULE_1__","newNonce","randomBytes","box","nonceLength","generateKeyPair","keyPair","encrypt","secretOrSharedKey","json","nonce","messageUint8","decodeUTF8","JSON","stringify","encrypted","after","fullMessage","set","encodeBase64","messageWithNonce","messageWithNonceAsUint8Array","decodeBase64","slice","message","decrypted","open","base64DecryptedMessage","encodeUTF8","parse","PEERS","ipfs","host","port","protocol","_IPFSDatabase","createDirectory","_createDirectory","directoryPath","files","mkdir","parents","_readDirectory","callback","ls","deleteDirectory","_deleteDirectory","rm","recursive","addFile","_addFile","directory","write","create","_x7","_x8","getContractAddress","_getContractAddress","ethereumAccount","read","_x9","_x10","_readFile","_callee6","_context6","_x11","_x12","defineProperty","_readFile2","_callee7","_context7","_x13","_deleteFile","_callee8","_context8","_x14","_x15","GenerateAlias","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","creatingAlias","aliasDir","inboxDir","uploadsDir","fileContent","Buffer","from","react__WEBPACK_IMPORTED_MODULE_7___default","rc_if_else__WEBPACK_IMPORTED_MODULE_9__","createAliasBox","placeholder","setAlias","generateAlias","UploadComponent","uploadSelectTypes","selector","convertToBuffer","_ref","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","reader","buffer","result","recipientEthereumAccount","recipientContractAddress","accountSelected","enableEncryption","dropdownOpen","uploading","uploadQueue","stopPropagation","preventDefault","uploadingFile","FileReader","readAsArrayBuffer","onloadend","uploadFileName","uploadContent","startTime","Date","getTime","recipient","recipientEthereumAddress","addToQueue","getEncryptedFile","removeFromQueue","sharedEncryptionKey","_this3","recipientAcctId","verified","modalState","onIPFSSubmit","toggleDropdown","clearFile","showModal","_queue_upload_queue_component__WEBPACK_IMPORTED_MODULE_27__","uploadQueueItems","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_23__","faUserLock","reactstrap__WEBPACK_IMPORTED_MODULE_12__","captureFile","reactstrap__WEBPACK_IMPORTED_MODULE_13__","reactstrap__WEBPACK_IMPORTED_MODULE_14__","reactstrap__WEBPACK_IMPORTED_MODULE_15__","disabled","reactstrap__WEBPACK_IMPORTED_MODULE_16__","reactstrap__WEBPACK_IMPORTED_MODULE_17__","onToggleEncryption","for","verifyRecipient","faTimesCircle","reactstrap__WEBPACK_IMPORTED_MODULE_18__","reactstrap__WEBPACK_IMPORTED_MODULE_19__","reactstrap__WEBPACK_IMPORTED_MODULE_20__","reactstrap__WEBPACK_IMPORTED_MODULE_21__","onCancel","UploadQueueComponent","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_5___default","rc_if_else__WEBPACK_IMPORTED_MODULE_6__","_material_ui_core_TableContainer__WEBPACK_IMPORTED_MODULE_10__","_material_ui_core_Table__WEBPACK_IMPORTED_MODULE_7__","_material_ui_core_TableHead__WEBPACK_IMPORTED_MODULE_11__","_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_12__","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_8__","p","initialState","rootReducer","action","LOAD_USER","assign","payload","ADD_TO_QUEUE","concat","REMOVE_FROM_QUEUE","filter","uploadObjEqualsItem","createStore","pairA","publicKey","secretKey","publicKeyAsString","privateKeyAsString","instance","contractDir","keysGenerated","deployContract","ethereumAccountId","address","rc_if_else__WEBPACK_IMPORTED_MODULE_13__","createSharedKeyEncryption","_createSharedKeyEncryption","senderEthereumAddress","senderContract","secretKeySendingAccount","recipientContract","publicKeySelectedAccount","publicKeyRecipient","secretKeySender","getContract","getPrivateKey","getPublicKey","logs","args","before","createSharedDecryptionKey","_createSharedDecryptionKey","_constants_action_types__WEBPACK_IMPORTED_MODULE_0__","_deployContract","privateKey","Contract","truffleContract","EncryptionKeys","setProvider","new","getContractByAddress","_getContractByAddress","at","_generateKeys","_createSharedKey","secretAddress","publicAddress","_getContract"],"mappings":"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","file":"static/js/main.8b8a3799.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1290;","import store from './store/index';\nimport { loadUser } from './actions/index';\n\nwindow.store = store;\nwindow.loadUser = loadUser;","import { loadUser } from \"../state/actions\";\nimport { IPFSDatabase } from \"../db/ipfs.db\";\n\nimport store from '../state/store/index';\n\nimport { aliasDirectory, contractDirectory } from \"../constants\";\n\n\nexport const UserService = {\n\n    async loadUser(web3) {\n        const accounts = await this.loadAccounts(web3);\n        // default to first account\n        const alias = await this.findAlias(accounts[0]);\n        const contract = String.fromCharCode(... new Uint8Array(await this.findContracts(accounts[0])));\n        console.log(contract);\n        await store.dispatch(loadUser({\n            alias          : alias,\n            contract       : contract,\n            accounts       : accounts,\n            account        : accounts[0]\n        }));\n    },\n\n    async loadAccounts(web3) {\n        return await web3.eth.getAccounts();\n        // let i = 1;\n        // for (let account of accounts) {\n        //     this.accountsSelector.push(\n        //         { label: account, value: i }\n        //     );\n        //     i += 1;\n        // }\n    },\n\n    async findAlias(account) {\n        const dir = aliasDirectory(account) + 'data.txt';\n        try {\n          const filesResponse = await IPFSDatabase.readFile(dir);\n          const content = String.fromCharCode(... new Uint8Array(filesResponse));\n          const alias = content.split('=')[1];\n          return alias;\n        } catch (e) {\n          return '';\n        }\n      },\n    \n      async findContracts(account) {\n        const dir = contractDirectory(account) + 'contract.txt';\n        try {\n          return await IPFSDatabase.readFile(dir);\n        } catch (e) {\n          return '';\n        }\n      },\n    \n      async getEthereumBalance(account, web3) {\n        return await web3.utils.fromWei(\n          await web3.eth.getBalance(account), 'ether');\n      }\n\n}\n\nexport default UserService;","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        // const web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n        const web3 = new Web3(window.web3.currentProvider);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = new Web3(window.web3.currentProvider);\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\n  export default getWeb3;","import React from 'react';\nimport { IPFSDatabase } from '../../db/ipfs.db';\nimport { EncryptionUtils } from '../../encryption/encrypt.service';\nimport { ContractService } from '../../service/contract.service';\n\nimport { contractDirectory, uploadDirectory, inboxDirectory } from '../../constants';\n\nimport { If, Else, Elif } from 'rc-if-else';\n\nimport {saveAs} from 'file-saver';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { faTrashAlt, faDownload, faInbox, faUpload } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { Spinner } from 'reactstrap';\n\nimport { Button, ButtonGroup } from 'reactstrap';\n\nimport './inbox.component.css';\n\nclass InboxComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            encryptedInbox: [],\n            uploadInbox: [],\n            downloadPending: [],\n            showInbox: 'uploads',\n        };\n        if (props.user) {\n            this.readUploads();\n            this.readInbox();\n        }\n    }\n\n    async onDownload(item) {\n        if (this.state.showInbox === 'uploads') {\n            const filepath = uploadDirectory(this.props.user.account) + item.filename;\n            // get the file from IPFS\n            const file = await IPFSDatabase.readFile(filepath);\n            this.download(file, item.filename);\n        } else {\n            this.updateDownloadPendingState(item, true);\n            const filepath = inboxDirectory(this.props.user.account) + item.sender + '/' + item.filename;\n            const file = await IPFSDatabase.readFile(filepath);\n\n            const contractAddress = this.props.user.contract;\n            const senderContractFileLoc = contractDirectory(item.sender) + 'contract.txt';\n            const senderContractAddress = await IPFSDatabase.readFile(senderContractFileLoc);\n\n            // create shared key\n            const sharedKey = await ContractService.createSharedKey(\n                this.props.web3, this.props.user.account, \n                item.sender.toString(), contractAddress, \n                senderContractAddress.toString()\n            );\n\n            const decryptedMessage = await EncryptionUtils.decrypt(\n                sharedKey, file\n            );\n\n            this.updateDownloadPendingState(item, false);\n            this.download(new Uint8Array(decryptedMessage.data), item.filename);\n        }\n    }\n\n    download(file, filename) {\n        const mime = require('mime-types');\n        const type = mime.lookup(filename);\n        const blob = new Blob([file], {type: type});\n        saveAs(blob, filename);\n    }\n\n    updateDownloadPendingState(item, downloadPending) {\n        this.setState(state => {\n            const downloadPendingList = state.encryptedInbox;\n            const indexOfItem = downloadPendingList.findIndex((obj => \n                obj.filename == item.filename && obj.sender === item.sender    \n            ));\n            downloadPendingList[indexOfItem].downloadPending = downloadPending;\n            return {\n                downloadPendingList,\n            };\n        });\n    }\n\n    async onDelete(item) {\n        // TODO\n        let filepath = '/content/' + this.props.user.account + '/uploads/' + item.filename;\n        if (this.state.showInbox === 'encrypted') {\n            filepath = '/content/' + this.props.ethereumAddress + '/inbox/' + item.sender + '/' + item.filename;\n            // remove from array\n            const inbox = [...this.state.encryptedInbox];\n            const index = inbox.indexOf(item);\n            inbox.splice(index, 1);\n            this.setState({encryptedInbox: inbox});\n        } else {\n            // remove from array\n            const inbox = [...this.state.uploadInbox];\n            const index = inbox.indexOf(item);\n            inbox.splice(index, 1);\n            this.setState({uploadInbox: inbox});\n        }\n        await IPFSDatabase.deleteFile(filepath, (err, res) => {\n            if (err) {\n                console.log('could not remove file ' + err);\n            }\n        });\n    }\n\n    createData(sender, filename) {\n        return { sender, filename, downloadPending: false };\n    }\n\n    async readUploads() {\n        // clear inbox contents\n        this.setState({ uploadInbox: [] });\n        let items = [];\n        const dir = uploadDirectory(this.props.user.account);\n        // get current ethereum address\n        const parentResponse = await IPFSDatabase.readDirectory(dir);\n        for (const senderRes of parentResponse) {\n            items.push(this.createData('upload', senderRes.name));\n        }\n        this.setState({uploadInbox: items});\n    }\n\n    async readInbox() {\n        const account = this.props.user.account;\n        // clear inbox contents\n        this.setState({ encryptedInbox: [] });\n        let items = [];\n        const dir = inboxDirectory(this.props.user.account);\n        // get current ethereum address\n        const parentResponse = await IPFSDatabase.readDirectory(dir);\n        for (const senderRes of parentResponse) {\n            const subdir = dir + senderRes.name;\n            const senderResponse = await IPFSDatabase.readDirectory(subdir);\n            for (const childRes of senderResponse) {\n                items.push(this.createData(senderRes.name, childRes.name));\n            }\n        }\n        this.setState({encryptedInbox: items});\n\n        // if (!items.length === 0) {\n        //     this.forceUpdate();\n        // }\n    }\n\n    async onToggleFileView(e) {\n        const fileView = this.state.showInbox;\n        if (fileView === 'uploads' && e.target.id === 'inbox') {\n            this.setState({showInbox: 'encrypted'});\n            await this.readInbox(this.props.ethereumAddress);\n        } else if (fileView === 'encrypted' && e.target.id === 'uploads') {\n            this.setState({showInbox: 'uploads'});\n            await this.readUploads(this.props.ethereumAddress);\n        }\n    }\n\n    render() {\n        if (!this.props.user) {\n            return (\n                <div>\n                    Loading......\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <div className=\"button-container\">\n                        <ButtonGroup>\n                            <Button className=\"select-view-button\" id='uploads' onClick={this.onToggleFileView.bind(this)}>\n                                <FontAwesomeIcon icon={faUpload} />\n                                Uploads ({this.state.uploadInbox.length})\n                            </Button>\n                            <Button className=\"select-view-button\" id='inbox' onClick={this.onToggleFileView.bind(this)}>\n                                <FontAwesomeIcon icon={faInbox} />\n                                Inbox ({this.state.encryptedInbox.length})\n                            </Button>\n                        </ButtonGroup>\n                    </div>\n                    <If condition={this.state.showInbox === 'encrypted'}>\n                        <div className=\"inbox-container\">\n                            <p>Inbox</p>\n                            <div className=\"inbox-list-container\">\n                                <If condition={this.state.encryptedInbox.length === 0}>\n                                    Inbox is empty\n                                    <Else>\n                                        <TableContainer component={Paper}>\n                                            <Table className=\"inbox-table\" aria-label=\"Inbox\">\n                                                <TableHead>\n                                                    <TableRow>\n                                                        <TableCell>Sender</TableCell>\n                                                        <TableCell>File name</TableCell>\n                                                        <TableCell>Download</TableCell>\n                                                        <TableCell>Delete</TableCell>\n                                                    </TableRow>\n                                                </TableHead>\n                                                <TableBody>\n                                                    {this.state.encryptedInbox.map(item => (\n                                                        <TableRow key={item.sender}>\n                                                            <TableCell>{item.sender}</TableCell>\n                                                            <TableCell>{item.filename}</TableCell>\n                                                            <TableCell>\n                                                                <If condition={item.downloadPending === true}>\n                                                                    <Spinner color=\"primary\" />\n                                                                    <Else>\n                                                                        <button className=\"download button\" onClick={() => this.onDownload(item)}>\n                                                                            <FontAwesomeIcon icon={faDownload} />\n                                                                        </button>\n                                                                    </Else>\n                                                                </If>\n                                                            </TableCell>\n                                                            <TableCell>\n                                                                <button className=\"delete button\" onClick={() => this.onDelete(item)}>\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\n                                                                </button>\n                                                            </TableCell>\n                                                        </TableRow>\n                                                    ))}\n                                                </TableBody>\n                                            </Table>\n                                        </TableContainer>\n                                    </Else>\n                                </If>\n                            </div>\n                        </div>\n                    </If>\n                    <If condition={this.state.showInbox === 'uploads'}>\n                        <div className=\"inbox-container\">\n                        <div className=\"inbox-list-container\">\n                            <If condition={this.state.uploadInbox.length === 0}>\n                                You have not uploaded any files.\n                                <Else>\n                                    <TableContainer component={Paper}>\n                                        <Table className=\"inbox-table\" aria-label=\"Inbox\">\n                                            <TableHead>\n                                                <TableRow>\n                                                    <TableCell>File name</TableCell>\n                                                    <TableCell>Download</TableCell>\n                                                    <TableCell>Delete</TableCell>\n                                                </TableRow>\n                                            </TableHead>\n                                            <TableBody>\n                                                {this.state.uploadInbox.map(item => (\n                                                    <TableRow key={item.sender}>\n                                                        <TableCell>{item.filename}</TableCell>\n                                                        <TableCell>\n                                                            <button className=\"download button\" onClick={() => this.onDownload(item)}>\n                                                                <FontAwesomeIcon icon={faDownload} />\n                                                            </button>\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <button className=\"delete button\" onClick={() => this.onDelete(item)}>\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\n                                                            </button>\n                                                        </TableCell>\n                                                    </TableRow>\n                                                ))}\n                                            </TableBody>\n                                        </Table>\n                                    </TableContainer>\n                                </Else>\n                            </If>\n                        </div>\n                    </div>\n                    </If>\n            </div>\n            );\n        }\n    }\n}\n\nexport default InboxComponent;","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n    Card, CardImg, CardText, CardBody,\n    CardTitle, Button,\n    Modal, ModalHeader, ModalBody, ModalFooter\n  } from 'reactstrap';\n\nimport { Spinner } from 'reactstrap';\n\nimport { If, Else } from 'rc-if-else';\nimport './contract-card.component.css';\n\nclass ContractCardComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            deployingContract: false\n        };\n    }\n\n    toggle() {\n        this.setState({modal: true});\n    }\n\n    async confirm() {\n        this.setState({modal: false, deployingContract: true});\n        await this.props.onConfirm();\n        this.setState({deployingContract: false});\n    }\n\n    cancel() {\n        this.setState({modal: false});\n    }\n\n    render() {\n        this.toggle = this.toggle.bind(this);\n        this.cancel = this.cancel.bind(this);\n        return (\n            <div className=\"contracts-container\">\n                <div>\n                    <Card className=\"contract-card\">\n                    {/* require(this.props.headerImage)} */}\n                        <CardImg className=\"contract-card-img\" width=\"50%\" \n                                src={this.props.headerImage} \n                                alt={this.props.contractName} />\n                        <CardBody>\n                            <CardTitle>{this.props.contractName}</CardTitle>\n                            <CardText>\n                                {this.props.cardText}\n                            </CardText>\n                            <If condition={this.state.deployingContract}>\n                                <span>\n                                    Deploying contract\n                                </span>\n                                <Spinner type=\"grow\" color=\"primary\" />\n                                <Else>\n                                    <If condition={this.props.contractDeployed === false}>\n                                        <Button color=\"primary\" onClick={this.toggle}>Submit</Button>\n                                    </If>\n                                </Else>\n                            </If>\n                            <Modal isOpen={this.state.modal} fade={false}\n                                toggle={this.toggle} className=\"modal-container\">\n                                <ModalHeader toggle={this.toggle}>\n                                    Deploy Contract\n                                </ModalHeader>\n                                <ModalBody>\n                                    This will cost ethereum in order to deploy the contract.\n                                </ModalBody>\n                                <ModalFooter className=\"modal-footer-container\">\n                                    <Button className=\"confirm action-button\" onClick={this.confirm.bind(this)} color=\"success\">\n                                        Confirm\n                                    </Button>\n                                    <Button className=\"cancel action-button\" onClick={this.cancel} color=\"danger\">\n                                        Cancel\n                                    </Button>\n                                </ModalFooter>\n                            </Modal>\n                        </CardBody>\n                    </Card>\n                </div>\n            </div>\n        );\n    }\n}\n\nContractCardComponent.propTypes = {\n    headerImage: PropTypes.string,\n    contractName: PropTypes.string,\n    cardText: PropTypes.string,\n    onConfirm: PropTypes.func\n};\nexport default ContractCardComponent;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { If, Else } from 'rc-if-else';\n\nimport LockImage from '../../resources/lock_icon.jpg';\nimport ContractCardComponent from './card/contract-card.component';\nimport {ContractService} from '../../service/contract.service';\n\nimport './contracts.component.css';\n\nclass ContractsComponent extends React.Component {\n\n    contractCardText = 'Generate encryption keys and store them in a smart contract deployed to the Ethereum blockchain.This contract then can then be applied to perform assymetric encryption, and send an encrypted file to another user.';\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            contractDeployed: false\n        };\n        if (props.user && props.user.contract) {\n            this.contractCardText = 'Contract deployed at ' + props.user.contract;\n            this.setState({contractDeployed: true});\n        }\n    }\n\n    async generateEncryptionKeysContract() {\n        const contractResult = await ContractService.generateKeys(\n            this.props.web3,\n            this.props.user.account);\n        await this.props.contractHandler(contractResult);\n    }\n\n    render() {\n        if (!this.props.user) {\n            return (\n                <div>\n                    Loading...\n                </div>\n            );\n        }\n        return (\n            <div className=\"contracts-container\">\n                <div className=\"contracts-header\">\n                    Contracts\n                </div>\n                <If condition={this.props.user.contract === ''}>\n                    <div className=\"card-container\">\n                        <ContractCardComponent \n                            headerImage      = {LockImage}\n                            contractName     = 'Encryption Keys Contract'\n                            cardText         = {this.contractCardText}\n                            onConfirm        = {this.generateEncryptionKeysContract.bind(this)}\n                            contractDeployed = {this.state.contractDeployed}\n                        />\n                    </div>\n                    <Else>\n                        <div className=\"card-container\">\n                            <ContractCardComponent \n                                headerImage      = {LockImage}\n                                contractName     = 'Encryption Keys Contract'\n                                cardText         = {this.contractCardText}\n                                contract         = {this.props.user.contract}\n                                user             = {this.props.user}\n                            />\n                        </div>\n                    </Else>\n                </If>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<ContractCardComponent />, document.getElementById('root'));\nexport default ContractsComponent;","import PropTypes from 'prop-types';\nimport React from \"react\";\nimport { If, Else } from 'rc-if-else';\n\nimport Select from 'react-select';\nimport { Alert } from 'reactstrap';\n\nimport { faCopy, faLock, faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport './header.component.css';\n\nclass HeaderComponent extends React.Component {\n\n    accountsSelector = [];\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showAlert: false,\n            user: null\n        };\n    }\n\n    async componentWillMount() {\n        this.loadAccounts();\n    }\n\n    loadAccounts() {\n        if (this.props.user && this.props.user.accounts) {\n            let i = 1;\n            for (let account of this.props.user.accounts) {\n                this.accountsSelector.push(\n                    { label: account, value: i }\n                );\n                i += 1;\n            }\n            if (this.props.user.accounts.length === 1) {\n\n            }\n        }\n    }\n\n    handleSelectAccount(state) {\n        alert('not yet implemented');\n    }\n\n    copyText() {\n        navigator.clipboard.writeText(this.props.user.account);\n        // alert for 5 seconds\n        this.setState({showAlert: true});\n        setTimeout(function() {\n          this.setState({showAlert: false});\n        }.bind(this), 5000);\n    }\n\n    render() {\n        if (!this.props.user) {\n            return (\n                <div>\n                    LOADING\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"header-container\">\n                    <div className=\"header header-container-main\">\n                        <div className=\"left app-name\">\n                            IRIS\n                        </div>\n                        <div className=\"header-container-main-details\">\n                            <div className=\"hamburger-container\">\n                                <FontAwesomeIcon icon={faBars} />\n                            </div>\n                            <div className=\"alias-container\">\n                                <p>\n                                    {this.props.user.alias}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"header header-container-secondary\">\n                        <div className=\"accounts-container\">\n                            <div className=\"account-selector-container\">\n                                {/* If only a single account is provided, select and display it,\n                                    otherwise show dropdown selector */}\n                                <If condition={this.props.user.accounts.length === 1}>\n                                    {this.props.user.accounts[0]}\n                                    <Else>\n                                        <Select className=\"dropdown\"\n                                                options={this.props.accountsSelector} GenerateKeys\n                                                onChange={this.handleSelectAccount.bind(this)}>\n                                        </Select>\n                                    </Else>\n                                </If>\n                            </div>\n                            <div className=\"copy-container\">\n                                <FontAwesomeIcon className=\"copy\" onClick={this.copyText.bind(this)} icon={faCopy} />\n                            </div>\n                        </div>\n                        <If condition={this.props.user.contract}>\n                            <div className=\"contract-icon-container\">\n                                <FontAwesomeIcon className=\"contract-icon\" icon={faLock} />\n                            </div>\n                        </If>\n                        <Alert className=\"copy-alert\" color=\"info\" isOpen={this.state.showAlert}>\n                            <span>Copied!</span>\n                        </Alert>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nHeaderComponent.propTypes = {\n    alias: PropTypes.string,\n    ethereumBalance: PropTypes.string,\n    alias: PropTypes.string,\n    selectAccount: PropTypes.func,\n    contracts: PropTypes.object\n};\n\nexport default HeaderComponent;","import PropTypes from 'prop-types';\nimport React from \"react\";\n\nimport { faUpload, faFileContract, faInbox, faUsers } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { viewConstants } from '../../constants';\n\nimport './sidebar.container.css';\n\nclass SidebarComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"sidebar-container\">\n                <div className=\"sidebar-button-container\">\n                  <div className=\"sidebar-item\">\n                    <FontAwesomeIcon className=\"sidebar-icon\" icon={faUpload} />\n                    <input type=\"button\" id={viewConstants.UPLOAD} value={viewConstants.UPLOAD} onClick={this.props.toggleView} />\n                  </div>\n                  <div className=\"sidebar-item\">\n                    <FontAwesomeIcon className=\"sidebar-icon\" icon={faInbox} />\n                    <input type=\"button\" id={viewConstants.INBOX} value={viewConstants.INBOX} onClick={this.props.toggleView} />\n                  </div>\n                  <div className=\"sidebar-item\">\n                    <FontAwesomeIcon className=\"sidebar-icon\" icon={faFileContract} />\n                    <input type=\"button\" id={viewConstants.CONTRACTS} value={viewConstants.CONTRACTS} onClick={this.props.toggleView} />\n                  </div>\n                  {/* <div className=\"sidebar-item\">\n                    <FontAwesomeIcon className=\"sidebar-icon\" icon={faUsers} />\n                    <input type=\"button\" value={viewConstants.PEERS} onClick={this.props.toggleView} />\n                  </div> */}\n                </div>\n                <div className=\"footer-container\">\n                  <span>driemworks 2020</span>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nSidebarComponent.propTypes = {\n    toggleView: PropTypes.func\n}\n\nexport default SidebarComponent;","import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport UserService from './service/user.service';\n\nimport { viewConstants } from './constants';\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport GenerateKeys from './components/generateKeys/generateKeys.component';\nimport GenerateAlias from './components/generateAlias/generateAlias.component';\nimport UploadComponent from './components/upload/upload.component';\nimport InboxComponent from './components/inbox/inbox.component';\nimport ContractsComponent from './components/contracts/contracts.component';\nimport HeaderComponent from \"./components/header/header.component\";\nimport SidebarComponent from \"./components/sidebar/sidebar.container\";\n\nimport \"./App.css\";\n\nimport store from './state/store/index';\nimport { loadUser } from './state/actions/index';\n\n\nclass App extends Component {\n\n  accountsSelector = [];\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      web3: null,\n      isWeb3Connected: false,\n      selectedView: viewConstants.INBOX\n    };\n\n    store.subscribe(() => {\n      const user = store.getState().user;\n      // set user state\n      this.setState({\n          user: user\n      });\n\n      // set default view\n      if (user.alias === '') {\n        this.setState({ selectedView: viewConstants.ALIAS });\n      }\n    });\n  }\n\n  makeDirIfNotExists() {\n    \n  }\n\n  componentDidMount = async () => {\n    const web3 = await getWeb3();\n    this.setState({ web3 });\n    web3.eth.net.isListening().then(\n      () => this.setState({ isWeb3Connected: true })\n    ).catch(e => console.log('web3 not connected'));\n    await UserService.loadUser(web3);\n  }\n\n  aliasHandler(e) {\n    const updatedUser = this.state.user;\n    updatedUser.alias = e;\n    store.dispatch(loadUser(updatedUser));\n    this.setState({selectedView: viewConstants.INBOX});\n  }\n\n  contractAddressHandler(e) {\n    const updatedUser = this.state.user;\n    updatedUser.contract = e;\n    store.dispatch(loadUser(updatedUser));\n  }\n\n  toggleView(event) {\n      this.setState({selectedView: event.target.id});\n  }\n\n  renderView() {\n    let view = <div>No view selected</div>\n    if (this.state.selectedView === viewConstants.UPLOAD) {\n      view = <UploadComponent \n                web3 = {this.state.web3}\n                user = {this.state.user}\n             />;\n    } else if (this.state.selectedView === viewConstants.INBOX) {\n      view = <InboxComponent\n                web3 = {this.state.web3}\n                user = {this.state.user}\n             />;\n    } else if (this.state.selectedView === viewConstants.CONTRACTS) {\n        view = <ContractsComponent\n                contractHandler = {this.contractAddressHandler.bind(this)}\n                web3            = {this.state.web3}\n                user            = {this.state.user}\n               />;\n    } else if (this.state.selectedView === viewConstants.ALIAS) {\n      view = <GenerateAlias \n                aliasHandler = {this.aliasHandler.bind(this)}\n                user         = {this.state.user}\n              />;\n    }\n    return view;\n  }\n\n  render() {\n    this.toggleView  = this.toggleView.bind(this);\n    const renderView = this.renderView();\n    // const user = store.getState().user;\n    if (!this.state.user) {\n      return (\n        <div>\n          Loading...\n        </div>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"header-container\">\n          <HeaderComponent \n            user = {this.state.user}\n          />\n        </div>\n        <div className=\"app-container\">\n          <div className=\"sidebard-container\">\n            <SidebarComponent \n              toggleView = {this.toggleView}\n            />\n          </div>\n          <div className=\"render-view-container\">\n            {renderView}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<GenerateKeys />, document.getElementById('root'));\nReactDOM.render(<UploadComponent />, document.getElementById('root'));\nReactDOM.render(<InboxComponent />, document.getElementById('root'));\nReactDOM.render(<GenerateAlias />, document.getElementById('root'));\nReactDOM.render(<ContractsComponent />, document.getElementById('root'));\nReactDOM.render(<HeaderComponent />, document.getElementById('root'));\nReactDOM.render(<SidebarComponent />, document.getElementById('root'));\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './state/store/index';\nimport index from './state/index';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './bootstrap-4.3.1-dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { box, randomBytes } from 'tweetnacl';\nimport {\n  decodeUTF8,\n  encodeUTF8,\n  decodeBase64,\n  encodeBase64\n} from 'tweetnacl-util';\n\nimport truffleContract from '@truffle/contract';\nimport EncryptionKeys from '../contracts/EncryptionKeys.json';\n\nexport const EncryptionUtils = {\n    newNonce: function() {\n        return randomBytes(box.nonceLength);  \n    },\n    \n    generateKeyPair: function() {\n        return box.keyPair();\n    },\n\n    /**\n     * Encrypt the json with the given keys\n     * @param {*} secretOrSharedKey \n     * @param {*} json \n     * @param {*} key \n     */\n    encrypt: function(secretOrSharedKey, json, key) {\n        const nonce = this.newNonce();\n        const messageUint8 = decodeUTF8(JSON.stringify(json));\n        const encrypted = key ? box(messageUint8, nonce, key, secretOrSharedKey) \n                                : box.after(messageUint8, nonce, secretOrSharedKey);\n        \n        const fullMessage = new Uint8Array(nonce.length + encrypted.length);\n        fullMessage.set(nonce);\n        fullMessage.set(encrypted, nonce.length);\n\n        const base64FullMessage = encodeBase64(fullMessage);\n        // console.log(base64FullMessage);\n        return base64FullMessage;\n    },\n\n    /**\n     * Decrypt the message with the given keys\n     * @param {*} secretOrSharedKey \n     * @param {*} messageWithNonce \n     * @param {*} key \n     */\n    decrypt: function(secretOrSharedKey, messageWithNonce, key) {\n        const messageWithNonceAsUint8Array = decodeBase64(messageWithNonce);\n        const nonce = messageWithNonceAsUint8Array.slice(0, box.nonceLength);\n        const message = messageWithNonceAsUint8Array.slice(box.nonceLength, \n            messageWithNonce.length);\n\n        const decrypted = key ? box.open(message, nonce, key, secretOrSharedKey)\n                                : box.open.after(message, nonce, secretOrSharedKey);\n\n        if (!decrypted) {\n            throw new Error('Could not decrypt message.');\n        }\n\n        const base64DecryptedMessage = encodeUTF8(decrypted);\n        return JSON.parse(base64DecryptedMessage);\n    }\n    \n}\n","// components to render\nexport const viewConstants = {\n    UPLOAD    : 'UPLOAD',\n    INBOX     : 'INBOX',\n    CONTRACTS : 'CONTRACTS',\n    ALIAS     : 'ALIAS',\n    PEERS     : 'PEERS'\n}\n\n// hash of the content directory\nexport const content = '/iris-content-directory/';\n\n// sub directories\nexport function aliasDirectory(account) {\n    return content + account + '/usr/';\n}\n\nexport function contractDirectory(account) {\n    return content + account + '/contract/';\n}\n\nexport function uploadDirectory(account) {\n    return content + account + '/uploads/';\n}\n\nexport function inboxDirectory(account) {\n    return content + account + '/inbox/';\n}\n\n","const IPFS = require('ipfs-http-client');\n\nconst ipfs = new IPFS({\n    host: '127.0.0.1',\n    port: 5001,\n    protocol: 'http'\n});\n\n// const ipfs = new IPFS({\n//     host: 'ipfs.infura.io',\n//     port: 5001,\n//     protocol: 'https'\n// });\n\nexport default ipfs;\n\n","import ipfs from '../ipfs';\nimport { readFile } from 'fs';\n\nexport const IPFSDatabase = {\n    async createDirectory(directoryPath) {\n        return await ipfs.files.mkdir(directoryPath, {parents: true}, (err, res) => {\n            if (err) {\n                console.log('Failed to create directory ' + directoryPath, err);\n            } else {\n                console.log('Created directory ' + directoryPath, res);\n            }\n        });\n    },\n    async readDirectory(directoryPath, callback) {\n        if (callback) {\n            return await ipfs.files.ls(directoryPath, (err, res) => {\n                callback(err, res);\n            });\n        } else {\n            return await ipfs.files.ls(directoryPath);\n        }\n    },\n    async deleteDirectory(directoryPath) {\n        return await ipfs.files.rm(directoryPath, {recursive: true}, (err, res) => {\n            if (err) {\n                console.log('Failed to delete directory', err);\n            } else {\n                console.log('Deleted directory ' + directoryPath + 'successfully.');\n            }\n        });\n    },\n    async addFile(directory, file, filename, callback) {\n        return await ipfs.files.write(\n            directory + filename, file, {create: true}, \n            (err, res) => {\n                callback(err, res);\n            }\n        );\n    },\n    async getContractAddress(ethereumAccount, callback) {\n        const filename = '/content/' + ethereumAccount + '/contract/contract.txt';\n        return await ipfs.files.read(filename, (err, res) => {\n            callback(err, res);\n        });\n    },\n    async readFile(filepath, callback) {\n        return await ipfs.files.read(filepath, (err, res) => callback(err, res));\n    },\n    async readFile(filepath) {\n        return await ipfs.files.read(filepath);\n    },\n    async deleteFile(filepath, callback) {\n        return await ipfs.files.rm(filepath, (err, res) => callback(err, res));\n    }\n}","import React from \"react\";\nimport { IPFSDatabase } from '../../db/ipfs.db';\nimport { If, Else } from 'rc-if-else';\nimport './generateAlias.component.css';\nimport { aliasDirectory, inboxDirectory, uploadDirectory } from \"../../constants\";\n\nclass GenerateAlias extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            creatingAlias: false\n        };\n    }\n\n    setAlias(e) {\n        this.setState({alias: e.target.value});\n    }\n\n    createAliasBox() {\n        this.setState({creatingAlias: true});\n    }\n\n    async generateAlias() {\n        // create user directories\n        const aliasDir = aliasDirectory(this.props.user.account);\n        const inboxDir = inboxDirectory(this.props.user.account);\n        const uploadsDir = uploadDirectory(this.props.user.account);\n        await IPFSDatabase.createDirectory(aliasDir);\n        await IPFSDatabase.createDirectory(inboxDir);\n        await IPFSDatabase.createDirectory(uploadsDir);\n        const fileContent = 'alias=' + this.state.alias;\n        await IPFSDatabase.addFile(aliasDir, Buffer.from(fileContent), 'data.txt', (err, res) => {\n        \n        });\n        this.props.aliasHandler(this.state.alias);\n    }\n\n    render() {\n        if (!this.props.user) {\n            return (\n                <div>\n                    Loading...?\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"generate-alias-container\">\n                    <If condition={this.props.user.alias === ''}>\n                        <div className=\"btn-container\">\n                            <div className=\"alias-container\">\n                                <If condition={this.state.creatingAlias === false}>\n                                    <button className=\"btn generate-keys-btn\" onClick={this.createAliasBox.bind(this)}>\n                                        Create Alias\n                                    </button>\n                                    <Else>\n                                        <p>\n                                            Create alias for account\n                                        </p>\n                                        <input className=\"alias-input-box\" type=\"textbox\" placeholder=\"alias\" onChange={this.setAlias.bind(this)} />\n                                        <button onClick={this.generateAlias.bind(this)}>\n                                            Submit\n                                        </button>\n                                    </Else>\n                                </If>\n                            </div>\n                        </div>\n                    </If>\n                    {/* <If condition={this.props.user.ethereumAddress !== \"\"}>\n                        <If condition={this.props.alias === \"\"}>\n                            \n                        </If>\n                        <Else>\n                            {this.props.alias}\n                        </Else>\n                    </If> */}\n                </div>\n            );\n        }\n    }\n}\n\nexport default GenerateAlias;\n","import React from \"react\";\nimport {IPFSDatabase} from '../../db/ipfs.db';\nimport { If, Else } from 'rc-if-else';\nimport { EncryptionUtils } from '../../encryption/encrypt.service';\nimport { ContractService } from '../../service/contract.service';\n\nimport { Modal, ModalHeader, ModalBody, ModalFooter,\n          Alert, Button, ButtonDropdown, DropdownToggle, \n          DropdownMenu, DropdownItem\n        } from 'reactstrap';\nimport { faTimesCircle, faUserLock } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { Spinner } from 'reactstrap';\n\nimport store from '../../state/store/index';\nimport { addToQueue, removeFromQueue } from '../../state/actions/index';\n\nimport './upload.component.css';\nimport UploadQueueComponent from \"./queue/upload-queue.component\";\nimport ReactDOM from 'react-dom';\nimport { uploadDirectory, inboxDirectory, contractDirectory } from \"../../constants\";\n\nclass UploadComponent extends React.Component {\n\n    files = [];\n    uploadSelectTypes = [\n        {\n            label: '',\n            selector: ''\n        }\n    ];\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            recipientEthereumAccount: '',\n            recipientContractAddress: '',\n            accountSelected: false,\n            enableEncryption: false,\n            dropdownOpen: false,\n            showAlert: false,\n            modal: false,\n            uploading: false,\n            uploadQueue: []\n        };\n        store.subscribe(() => {\n            this.setState({ uploadQueue: store.getState().uploadQueue });\n        });\n    }\n\n    /**\n     * Upload a file\n     * @param event \n     */\n    async captureFile(event) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        const file = await event.target.files[0];\n        this.setState({ uploadingFile: true, file: file });\n\n        let reader = new window.FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.onloadend = () => { this.convertToBuffer(reader); }\n        this.setState({uploadFileName: file.name, uploadingFile: false });\n    }\n\n    /**\n     * convert the reader to a buffer and set the state\n     */\n    convertToBuffer = async(reader) => {\n        const buffer = Buffer.from(reader.result);\n        this.setState({buffer: buffer});\n    }\n\n    /**\n     * Add the uploaded file to IPFS\n     */\n    async onIPFSSubmit(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        \n        this.setState({uploading: true});\n        // default behavior: upload file unencrypted and add to user's upload directory\n        let uploadContent = Buffer.from(this.state.buffer);\n        let dir = uploadDirectory(this.props.user.account);\n\n        if (this.state.enableEncryption) {\n            const item = {\n                startTime : new Date().getTime(),\n                filename: this.state.uploadFileName,\n                recipient: this.state.recipientEthereumAddress\n            };\n            store.dispatch(addToQueue(item));\n            uploadContent = await this.getEncryptedFile();\n            store.dispatch(removeFromQueue(item));\n            dir = inboxDirectory(this.state.recipientEthereumAddress) + this.props.user.account + '/';\n        }\n        // add to recipient's inbox\n        debugger;\n        // make sure the directory exists\n        await IPFSDatabase.createDirectory(dir);\n        await this.addFile(dir, Buffer.from(uploadContent));\n        this.showAlert();\n        this.setState({accountSelected: false, file: null, uploading: false});\n    }\n\n    async getEncryptedFile() {\n        const recipientContractAddress = this.state.recipientContractAddress;\n        const senderContractAddress = this.props.user.contract;\n        if (recipientContractAddress !== '' && senderContractAddress !== '') {\n            const sharedEncryptionKey = await ContractService.createSharedKey(\n                this.props.web3, this.props.user.account, \n                this.state.recipientEthereumAddress, \n                senderContractAddress, \n                recipientContractAddress\n            );\n            // encrypt the buffer\n            const encrypted = EncryptionUtils.encrypt(sharedEncryptionKey, this.state.buffer);\n            return encrypted;\n        } else {\n            alert('Could not find a public/private keys for the specified account');\n        }\n    }\n\n    async addFile(dir, content) {\n        await IPFSDatabase.addFile(dir, content, this.state.uploadFileName,\n            (err, res) => {\n                if (err) {\n                    console.log(err);\n                } else {\n                    console.log(res);\n                    this.setState({ recipientContractAddress: '' });\n                }\n            }\n        );\n    }\n\n    setRecipient(event) {\n        const recipientAcctId = event.target.value;\n        this.setState({ recipientEthereumAddress: recipientAcctId });\n        if (this.state.accountSelected) {\n           this.setState({accountSelected: false});\n        }\n    }\n\n    async verifyRecipient(e) {\n        const recipientAcctId = e.target.value;\n        if (recipientAcctId !== \"\") {\n            this.setState({ recipientEthereumAddress: recipientAcctId, \n                            accountSelected: recipientAcctId !== \"\" });\n            const dir = contractDirectory(recipientAcctId) + 'contract.txt';\n            const res = await IPFSDatabase.readFile(dir);\n            if (!res) {\n                this.setState({verified: false});\n            } else {\n                this.setState({verified: true});\n                this.setState({recipientContractAddress: res.toString()});\n            }\n        }\n    }\n\n    toggleDropdown() {\n        this.setState({\n            dropdownOpen: !this.state.dropdownOpen\n        });\n    }\n\n    onToggleEncryption() {\n        this.setState({enableEncryption: true});\n    }\n\n    clearFile() {\n        this.setState({ file: null, enableEncryption: false, accountSelected: false });\n    }\n\n    showAlert() {\n        this.setState({showAlert: true});\n        setTimeout(function() {\n            this.setState({showAlert: false});\n        }.bind(this), 5000); \n    }\n\n    showModal() {\n        const modalState = this.state.modal;\n        this.setState({ modal: !modalState });\n    }\n\n    onConfirm() {\n        this.setState({ modal: false, file: null,accountSelected: false, enableEncryption: false });\n        this.onIPFSSubmit();\n    }\n\n    onCancel() {\n        this.setState({ modal: false });\n    }\n\n    render() {\n        this.toggleDropdown = this.toggleDropdown.bind(this);\n        this.clearFile      = this.clearFile.bind(this);\n        this.showModal      = this.showModal.bind(this);\n        return (\n            <div className=\"upload-container\">\n                <If condition={this.state.uploadQueue.length > 0}>\n                    <UploadQueueComponent \n                        uploadQueueItems = {this.state.uploadQueue}\n                    />\n                </If>\n                <div className=\"send-message-container\">\n                    <div className=\"upload-type-selector\">\n                        <If condition={this.state.enableEncryption === true}>\n                            <FontAwesomeIcon icon={faUserLock} />\n                        </If>\n                        <p>Upload Files</p>\n                        <Alert className=\"upload-alert\" color=\"info\" isOpen={this.state.showAlert}>\n                            File uploaded successfully\n                        </Alert>\n                    </div>\n                    <If condition={!this.state.file}>\n                        <div className=\"file-selector\">\n                            <input type=\"file\" onChange={this.captureFile.bind(this)} />\n                        </div>\n                        <Else>\n                            <Else>\n                                <div className=\"upload-selection-container\">\n                                    <div>\n                                        <span>\n                                            {this.state.uploadFileName}\n                                        </span>\n                                        <Button className=\"clear-btn\" color=\"danger\" onClick={this.clearFile}>\n                                            Clear\n                                        </Button>\n                                    </div>\n                                    <If condition={this.state.enableEncryption === false}>\n                                        <ButtonDropdown className=\"button-dropdown\" isOpen={this.state.dropdownOpen} toggle={this.toggleDropdown} >\n                                            <DropdownToggle color=\"info\" disabled={this.state.accountSelected === true}>\n                                                Upload\n                                            </DropdownToggle>\n                                            <DropdownMenu>\n                                                <DropdownItem name=\"upload\" onClick={this.onIPFSSubmit.bind(this)}>\n                                                    Upload\n                                                </DropdownItem>\n                                                <DropdownItem name=\"encrypt\" disabled={this.props.contractAddress === \"\"} onClick={this.onToggleEncryption.bind(this)}>\n                                                    Encrypted Upload\n                                                </DropdownItem>\n                                            </DropdownMenu>\n                                        </ButtonDropdown>\n                                    </If>\n                                </div>\n                                <div className=\"upload-container\">\n                                    <If condition={this.state.enableEncryption === true}>\n                                        <div>\n                                            <label for=\"ethereum-account-selector\">\n                                                Select recipient ethereum account\n                                            </label>\n                                            <input name=\"ethereum-account-selector\" type=\"text\" placeholder=\"0x...\" onChange={this.verifyRecipient.bind(this)} />\n                                            <If condition={!this.state.verified}>\n                                                <div className=\"not-verified\">\n                                                    <If condition={!this.state.accountSelected}>\n                                                        <p>\n                                                            Select an ethereum account\n                                                        </p>\n                                                        <Else>\n                                                            <FontAwesomeIcon icon={faTimesCircle} />\n                                                            <p>\n                                                                Not a valid account.\n                                                            </p>\n                                                        </Else>\n                                                    </If>\n                                                </div>\n                                                <Else>\n                                                    <div className=\"verified\">\n                                                        <Button color=\"success\" onClick={this.showModal}>\n                                                            Go\n                                                        </Button>\n                                                        <Modal isOpen={this.state.modal} fade={false}\n                                                            toggle={this.showModal} className=\"modal-container\">\n                                                            <ModalHeader toggle={this.showModal}>\n                                                                Encrypt file.\n                                                            </ModalHeader>\n                                                            <ModalBody>\n                                                                You are about to encrypt this file. \n                                                                This will cost ethereum in order to retrieve your encryption keys.\n                                                                Do you wish to proceed?\n                                                            </ModalBody>\n                                                            <ModalFooter className=\"modal-footer-container\">\n                                                                <Button className=\"confirm action-button\" onClick={this.onConfirm.bind(this)} color=\"success\">\n                                                                    Confirm\n                                                                </Button>\n                                                                <Button className=\"cancel action-button\" onClick={this.onCancel.bind(this)} color=\"danger\">\n                                                                    Cancel\n                                                                </Button>\n                                                            </ModalFooter>\n                                                        </Modal>\n                                                    </div>\n                                                </Else>\n                                            </If>\n                                        </div>      \n                                    </If>\n                                </div>   \n                            </Else>\n                        </Else>\n                    </If>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<UploadQueueComponent />, document.getElementById('root'));\nexport default UploadComponent;","import React, { Component } from \"react\";\n\nimport { If, Else, Elif } from 'rc-if-else';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport './upload-queue.component.css';\n\nclass UploadQueueComponent extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        if (!this.props.uploadQueueItems) {\n            return (\n                <div>\n                    \n                </div>\n            );\n        }\n        return (\n            <div className=\"upload-queue-container\">\n                <div className=\"upload-queue-container-header\">\n                    Upload Queue\n                </div>\n                <If condition={this.props.uploadQueueItems.length === 0}>\n                    <div>\n                        No items in queue\n                    </div>\n                    <Else>\n                        <div className=\"upload-queue-container-body\">\n                            <TableContainer component={Paper} className=\"upload-queue-table-container\">\n                                <Table className=\"upload-queue-table\" aria-label=\"Inbox\">\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell>Filename</TableCell>\n                                            <TableCell>Recipient</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {this.props.uploadQueueItems.map((item, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell>{item.filename}</TableCell>\n                                                <TableCell>\n                                                    <span className=\"item-recipient-container\">\n                                                        {item.recipient}\n                                                    </span>\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                        </div>\n                    </Else>\n                </If>\n            </div>\n        );\n    }\n\n}\n\nexport default UploadQueueComponent;","module.exports = __webpack_public_path__ + \"static/media/lock_icon.ba2cf6d5.jpg\";","import { LOAD_USER, ADD_TO_QUEUE, REMOVE_FROM_QUEUE } from \"../constants/action-types\";\n\nconst initialState = {\n    user: {\n        alias:    '',\n        contract: '',\n        accounts: [],\n        account:  ''\n    },\n    uploadQueue: []\n};\n\nfunction rootReducer(state = initialState, action) {\n    if (action.type == LOAD_USER) {\n        return Object.assign({}, state, {\n            user: action.payload\n        });\n    } else if (action.type == ADD_TO_QUEUE) {\n        return Object.assign({}, state, {\n           uploadQueue: state.uploadQueue.concat(action.payload)\n        });\n    } else if (action.type == REMOVE_FROM_QUEUE) {\n        return Object.assign({}, state, {\n            uploadQueue: state.uploadQueue.filter(function(obj) {\n                return !uploadObjEqualsItem(obj, action.payload);\n            })\n         });\n    }\n    return state;\n}\n\nfunction uploadObjEqualsItem(obj, item) {\n    return obj.startTime === item.startTime \n            && obj.filename === item.filename \n            && obj.recipient === item.recipient;\n}\n\nexport default rootReducer;","import { createStore } from \"redux\";\nimport rootReducer from \"../reducers/index\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from \"react\";\nimport { ContractService } from '../../service/contract.service';\nimport { EncryptionUtils } from '../../encryption/encrypt.service';\nimport { IPFSDatabase } from '../../db/ipfs.db';\nimport {\n  encodeBase64\n} from 'tweetnacl-util';\n\nimport { contractDirectory, uploadDirectory, inboxDirectory } from '../../constants';\nimport { If, Else } from 'rc-if-else';\nimport './generateKeys.component.css';\n\nclass GenerateKeys extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ethereumAccountId: props.ethereumAccountId,\n            alias: \"\",\n            contractAddress: \"\"\n        };\n    }\n\n    generateKeys = async() => {\n        const pairA = await EncryptionUtils.generateKeyPair();\n        let publicKey = pairA.publicKey;\n        let secretKey = pairA.secretKey;\n\n        this.setState({ keysGenerated: true });\n        const publicKeyAsString = encodeBase64(publicKey);\n        const privateKeyAsString = encodeBase64(secretKey);\n        const instance = await ContractService.deployContract(10000, this.props.web3, publicKeyAsString, \n            privateKeyAsString, this.props.ethereumAccountId);\n        const contractAddress = instance.address;\n\n        this.props.action(contractAddress);\n        this.setState({ contractAddress });\n        // create ipfs file and upload\n        const contractDir =  contractDirectory(this.props.user.account);\n        IPFSDatabase.createDirectory(contractDir);\n        await IPFSDatabase.addFile(contractDir, \n            Buffer.from(contractAddress), 'contract.txt', (err, res) => {\n        });\n    }\n    render() {\n        return (\n            <div className=\"generate-keys-container\">\n                <If condition={this.props.ethereumAccountId !== \"\"}>\n                    <If condition={this.state.contractAddress === \"\"}>\n                            <div className=\"keys-container\">\n                                <p>\n                                    Generate encryption keys to allow you to send encrypted files.\n                                    This will cost ethereum.\n                                </p>\n                                <button className=\"btn generate-keys-btn\" onClick={this.generateKeys.bind(this)}>\n                                    Generate Keys\n                                </button>\n                            </div>\n                    </If>\n                </If>\n            </div>\n        );\n    }\n}\n\nexport default GenerateKeys;\n","import { box, randomBytes } from 'tweetnacl';\nimport {\n  decodeUTF8,\n  encodeUTF8,\n  decodeBase64,\n  encodeBase64\n} from 'tweetnacl-util';\n\nexport const EncryptionUtils = {\n    newNonce: function() {\n        return randomBytes(box.nonceLength);  \n    },\n    \n    generateKeyPair: function() {\n        return box.keyPair();\n    },\n\n    /**\n     * Encrypt the json with the given keys\n     * @param {*} secretOrSharedKey \n     * @param {*} json \n     * @param {*} key \n     */\n    encrypt: function(secretOrSharedKey, json, key) {\n        const nonce = this.newNonce();\n        const messageUint8 = decodeUTF8(JSON.stringify(json));\n        const encrypted = key ? box(messageUint8, nonce, key, secretOrSharedKey) \n                                : box.after(messageUint8, nonce, secretOrSharedKey);\n        \n        const fullMessage = new Uint8Array(nonce.length + encrypted.length);\n        fullMessage.set(nonce);\n        fullMessage.set(encrypted, nonce.length);\n\n        const base64FullMessage = encodeBase64(fullMessage);\n        // console.log(base64FullMessage);\n        return base64FullMessage;\n    },\n\n    /**\n     * Decrypt the message with the given keys\n     * @param {*} secretOrSharedKey \n     * @param {*} messageWithNonce \n     * @param {*} key \n     */\n    decrypt: function(secretOrSharedKey, messageWithNonce, key) {\n        const messageWithNonceAsUint8Array = decodeBase64(messageWithNonce);\n        const nonce = messageWithNonceAsUint8Array.slice(0, box.nonceLength);\n        const message = messageWithNonceAsUint8Array.slice(box.nonceLength, \n            messageWithNonce.length);\n\n        const decrypted = key ? box.open(message, nonce, key, secretOrSharedKey)\n                                : box.open.after(message, nonce, secretOrSharedKey);\n\n        if (!decrypted) {\n            throw new Error('Could not decrypt message.');\n        }\n\n        const base64DecryptedMessage = encodeUTF8(decrypted);\n        return JSON.parse(base64DecryptedMessage);\n    },\n\n    async createSharedKeyEncryption(senderEthereumAddress, recipientEthereumAddress, \n        senderContractAddress, recipientContractAddress) {\n        // sender secret key\n        const senderContract = await this.getContract(senderContractAddress);\n        const secretKeySendingAccount = await senderContract.getPrivateKey( { from: senderEthereumAddress });\n\n        // recipient public key\n        const recipientContract = await this.getContract(recipientContractAddress);\n        const publicKeySelectedAccount = await recipientContract.getPublicKey({ from: recipientEthereumAddress });\n\n        const publicKeyRecipient = decodeBase64(publicKeySelectedAccount.logs[0].args['0']);\n        const secretKeySender = decodeBase64(secretKeySendingAccount.logs[0].args['0']);\n        // create shared key\n        return box.before(publicKeyRecipient, secretKeySender);\n    },\n    \n    async createSharedDecryptionKey() {\n        //todo\n        console.log('Not yet implemented'); \n    }\n}","import { LOAD_USER, ADD_TO_QUEUE, REMOVE_FROM_QUEUE } from '../constants/action-types';\n\nexport function loadUser(payload) {\n    return { \n        type: LOAD_USER, \n        payload: payload \n    }\n}\n\nexport function addToQueue(payload) {\n    return {\n        type: ADD_TO_QUEUE,\n        payload: payload\n    }\n}\n\nexport function removeFromQueue(payload) {\n    return {\n        type: REMOVE_FROM_QUEUE,\n        payload: payload\n    }   \n}","import {EncryptionUtils} from '../utils/encryption.utils';\nimport truffleContract from '@truffle/contract';\nimport EncryptionKeys from '../contracts/EncryptionKeys.json';\n// import {ContractUtils} from '../utils/contract.utils';\nimport {IPFSDatabase} from '../db/ipfs.db';\nimport { box, randomBytes } from 'tweetnacl';\nimport {\n  decodeUTF8,\n  encodeUTF8,\n  decodeBase64,\n  encodeBase64\n} from 'tweetnacl-util';\n\nimport { contractDirectory } from \"../constants\";\n// 0xd884EFECcF76F743f07F7010a35CE4D37c83A04b\n\nexport const ContractService = {\n\n    /**\n     * Deploy the encryption keys contract\n     * @param {*} _gas \n     * @param {*} sharedA \n     * @param {*} sharedB \n     */\n    async deployContract(web3, publicKey, privateKey, account) {\n        const Contract = truffleContract(EncryptionKeys);\n        Contract.setProvider(web3.currentProvider);\n        return Contract.new(publicKey, privateKey, { from: account });\n    },\n\n    /**\n     * Retrieve a contract by address\n     * @param {*} web3 \n     * @param {*} contractAddress \n     */\n    async getContractByAddress(web3, contractAddress) {\n        const contract = truffleContract(EncryptionKeys);\n        contract.setProvider(web3.currentProvider);\n        return await contract.at(contractAddress);\n    },\n\n    /**\n     * Generate encryption keys and deploy the contract \n     * Makes a single ethereum transaction - to deploy the contract\n     * @param {*} web3 \n     * @param {*} account \n     */\n    async generateKeys(web3, account) {\n        // const gasPrice = 1000000;\n        const pairA = await EncryptionUtils.generateKeyPair();\n        let publicKey = pairA.publicKey;\n        let secretKey = pairA.secretKey;\n\n        const publicKeyAsString = encodeBase64(publicKey);\n        const privateKeyAsString = encodeBase64(secretKey);\n        const instance = await this.deployContract(web3, publicKeyAsString, \n            privateKeyAsString, account);\n        const contractAddress = instance.address;\n        // create ipfs file and upload\n        const directory = contractDirectory(account)\n        // IPFSDatabase.deleteDirectory('/content/' + this.props.ethereumAccountId);\n        // create directory\n        IPFSDatabase.createDirectory(directory);\n        await IPFSDatabase.addFile(directory, Buffer.from(contractAddress), 'contract.txt', \n            (err, res) => {\n                console.log(JSON.stringify(res)); \n            }\n        );\n        return contractAddress;\n    },\n\n    async createSharedKey(web3, secretAddress, publicAddress, \n        senderContractAddress, recipientContractAddress) {\n        // sender secret key\n        const senderContract = await this.getContract(web3, senderContractAddress);\n        const secretKeySendingAccount = await senderContract.getPrivateKey( { from: secretAddress });\n\n        // recipient public key\n        const recipientContract = await this.getContract(web3, recipientContractAddress);\n        const publicKeySelectedAccount = await recipientContract.getPublicKey({ from: publicAddress });\n\n        const publicKeyRecipient = decodeBase64(publicKeySelectedAccount.logs[0].args['0']);\n        const secretKeySender = decodeBase64(secretKeySendingAccount.logs[0].args['0']);\n        // create shared key\n        return box.before(publicKeyRecipient, secretKeySender);\n    },\n    \n    async getContract(web3, address) {\n        const contract = truffleContract(EncryptionKeys);\n        contract.setProvider(web3.currentProvider);\n        return await contract.at(address);\n    }\n}\n\nexport default ContractService;","export const LOAD_USER         = \"LOAD_USER\";\nexport const ADD_TO_QUEUE      = \"ADD_TO_QUEUE\";\nexport const REMOVE_FROM_QUEUE = \"REMOVE_FROM_QUEUE\";"],"sourceRoot":""}