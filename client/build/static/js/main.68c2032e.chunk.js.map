{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","state/index.js","service/user.service.js","utils/getWeb3.js","components/inbox/inbox.component.js","components/contracts/card/contract-card.component.js","components/contracts/contracts.component.js","components/header/header.component.js","components/sidebar/sidebar.container.js","components/peers/peers.component.js","components/flip-card/flip-card.component.js","components/about/about.component.js","App.js","serviceWorker.js","index.js","encryption/encrypt.service.js","constants.js","components/generateAlias/generateAlias.component.js","components/upload/upload.component.js","components/upload/queue/upload-queue.component.js","resources/lock_icon.jpg","ipfs.js","db/ipfs.db.js","state/reducers/index.js","state/store/index.js","components/generateKeys/generateKeys.component.js","utils/encryption.utils.js","state/actions/index.js","state/constants/action-types.js","service/contract.service.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","window","store","loadUser","UserService","_loadUser2","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","accounts","alias","contract","wrap","_context","prev","next","this","loadAccounts","sent","findAlias","t0","String","fromCharCode","t1","t2","toConsumableArray","t3","Uint8Array","findContracts","t4","t5","t6","apply","call","console","log","dispatch","account","stop","_x","arguments","_loadAccounts","_callee2","_context2","eth","getAccounts","abrupt","_x2","_findAlias","_callee3","dir","filesResponse","content","_context3","aliasDirectory","IPFSDatabase","readFile","split","_x3","_findContracts","_callee4","_context4","contractDirectory","_x4","getEthereumBalance","_getEthereumBalance","_callee5","_context5","utils","getBalance","fromWei","_x5","_x6","getWeb3","Promise","reject","addEventListener","_web","provider","_web2","ethereum","Web3","currentProvider","enable","providers","HttpProvider","InboxComponent","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","encryptedInbox","uploadInbox","downloadPending","showInbox","user","readUploads","readInbox","item","filepath","uploadDirectory","filename","file","download","updateDownloadPendingState","inboxDirectory","sender","contractAddress","senderContractFileLoc","senderContractAddress","ContractService","createSharedKey","toString","sharedKey","EncryptionUtils","decrypt","decryptedMessage","data","type","require","lookup","blob","Blob","saveAs","setState","downloadPendingList","indexOfItem","findIndex","obj","inbox","index","indexOf","splice","deleteFile","err","res","items","readDirectory","parentResponse","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","done","senderRes","value","push","createData","name","subdir","senderResponse","_iterator3","_iteratorNormalCompletion3","_step3","childRes","fileView","target","ethereumAddress","_this2","react_default","createElement","className","ButtonGroup","Button","onClick","onToggleFileView","bind","react_fontawesome_index_es","icon","faUpload","length","faInbox","rc_if_else_es","condition","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","key","Spinner","color","onDownload","faDownload","onDelete","faTrashAlt","React","Component","ContractCardComponent","modal","deployingContract","onConfirm","toggle","cancel","Card","CardImg","width","src","headerImage","alt","contractName","CardBody","CardTitle","CardText","cardText","contractDeployed","Modal","isOpen","fade","ModalHeader","ModalBody","ModalFooter","confirm","ContractsComponent","contractCardText","generateKeys","contractResult","contractHandler","card_contract_card_component","LockImage","generateEncryptionKeysContract","ReactDOM","render","document","getElementById","HeaderComponent","accountsSelector","showAlert","i","_didIteratorError","_iteratorError","undefined","label","return","toggleState","toggleAbout","alert","navigator","clipboard","writeText","setTimeout","react_select_browser_esm","options","GenerateKeys","onChange","handleSelectAccount","copyText","faCopy","faLock","Alert","SidebarComponent","viewConstants","UPLOAD","toggleView","INBOX","faFileContract","CONTRACTS","href","PeersComponent","FlipCardComponent","class","headerText","text","AboutComponent","action","Jumbotron","goHome","flip_card_flip_card_component","faProjectDiagram","App","componentDidMount","net","isListening","then","isWeb3Connected","catch","selectedView","showAbout","subscribe","getState","ALIAS","updatedUser","event","view","upload_component","inbox_inbox_component","contracts_contracts_component","contractAddressHandler","generateAlias_component","aliasHandler","PEERS","peers_peers_component","renderView","header_header_component","about_about_component","sidebar_sidebar_container","generateKeys_component","Boolean","location","hostname","match","es","src_App_0","serviceWorker","ready","registration","unregister","__webpack_require__","d","__webpack_exports__","tweetnacl__WEBPACK_IMPORTED_MODULE_0__","tweetnacl_util__WEBPACK_IMPORTED_MODULE_1__","newNonce","randomBytes","box","nonceLength","generateKeyPair","keyPair","encrypt","secretOrSharedKey","json","nonce","messageUint8","decodeUTF8","JSON","stringify","encrypted","after","fullMessage","set","encodeBase64","messageWithNonce","messageWithNonceAsUint8Array","decodeBase64","slice","message","decrypted","open","base64DecryptedMessage","encodeUTF8","parse","resources","GenerateAlias","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","creatingAlias","aliasDir","inboxDir","uploadsDir","createDirectory","fileContent","addFile","Buffer","from","react__WEBPACK_IMPORTED_MODULE_7___default","rc_if_else__WEBPACK_IMPORTED_MODULE_9__","createAliasBox","placeholder","setAlias","generateAlias","UploadComponent","files","uploadSelectTypes","selector","convertToBuffer","_ref","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","reader","buffer","result","recipientEthereumAccount","recipientContractAddress","accountSelected","enableEncryption","dropdownOpen","uploading","uploadQueue","stopPropagation","preventDefault","uploadingFile","FileReader","readAsArrayBuffer","onloadend","uploadFileName","uploadContent","startTime","Date","getTime","recipient","recipientEthereumAddress","addToQueue","getEncryptedFile","removeFromQueue","sharedEncryptionKey","_this3","recipientAcctId","verified","modalState","onIPFSSubmit","toggleDropdown","clearFile","showModal","_queue_upload_queue_component__WEBPACK_IMPORTED_MODULE_27__","uploadQueueItems","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_23__","faUserLock","reactstrap__WEBPACK_IMPORTED_MODULE_12__","captureFile","faTimesCircle","reactstrap__WEBPACK_IMPORTED_MODULE_13__","reactstrap__WEBPACK_IMPORTED_MODULE_14__","disabled","reactstrap__WEBPACK_IMPORTED_MODULE_15__","reactstrap__WEBPACK_IMPORTED_MODULE_16__","onToggleEncryption","for","verifyRecipient","reactstrap__WEBPACK_IMPORTED_MODULE_17__","reactstrap__WEBPACK_IMPORTED_MODULE_18__","reactstrap__WEBPACK_IMPORTED_MODULE_19__","reactstrap__WEBPACK_IMPORTED_MODULE_20__","reactstrap__WEBPACK_IMPORTED_MODULE_21__","onCancel","UploadQueueComponent","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_tony_work_iris_iris_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_5___default","rc_if_else__WEBPACK_IMPORTED_MODULE_6__","_material_ui_core_TableContainer__WEBPACK_IMPORTED_MODULE_10__","_material_ui_core_Table__WEBPACK_IMPORTED_MODULE_7__","_material_ui_core_TableHead__WEBPACK_IMPORTED_MODULE_11__","_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_12__","_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_9__","_material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_8__","p","ipfs","host","port","protocol","_IPFSDatabase","_createDirectory","directoryPath","mkdir","parents","_readDirectory","callback","ls","deleteDirectory","_deleteDirectory","rm","recursive","_addFile","directory","write","create","_x7","_x8","updateFileWithData","_updateFileWithData","_x9","_x10","_readFile","_callee6","_context6","read","_x11","_x12","defineProperty","_readFile2","_callee7","_context7","_x13","_deleteFile","_callee8","_context8","_x14","_x15","initialState","contractDeployStatus","rootReducer","LOAD_USER","assign","payload","ADD_TO_QUEUE","concat","REMOVE_FROM_QUEUE","filter","uploadObjEqualsItem","CONTRACT_DEPLOYING","createStore","pairA","publicKey","secretKey","publicKeyAsString","privateKeyAsString","instance","contractDir","keysGenerated","deployContract","ethereumAccountId","address","rc_if_else__WEBPACK_IMPORTED_MODULE_13__","createSharedKeyEncryption","_createSharedKeyEncryption","senderEthereumAddress","senderContract","secretKeySendingAccount","recipientContract","publicKeySelectedAccount","publicKeyRecipient","secretKeySender","getContract","getPrivateKey","getPublicKey","logs","args","before","createSharedDecryptionKey","_createSharedDecryptionKey","_constants_action_types__WEBPACK_IMPORTED_MODULE_0__","_deployContract","privateKey","Contract","truffleContract","EncryptionKeys","setProvider","new","getContractByAddress","_getContractByAddress","at","_generateKeys","_createSharedKey","secretAddress","publicAddress","_getContract"],"mappings":"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","file":"static/js/main.68c2032e.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1290;","import store from './store/index';\nimport { loadUser } from './actions/index';\n\nwindow.store = store;\nwindow.loadUser = loadUser;","import { loadUser } from \"../state/actions\";\nimport { IPFSDatabase } from \"../db/ipfs.db\";\n\nimport store from '../state/store/index';\n\nimport { aliasDirectory, contractDirectory } from \"../constants\";\n\n\nexport const UserService = {\n\n    async loadUser(web3) {\n        const accounts = await this.loadAccounts(web3);\n        // default to first account\n        const alias = await this.findAlias(accounts[0]);\n        const contract = String.fromCharCode(... new Uint8Array(await this.findContracts(accounts[0])));\n        console.log(contract);\n        await store.dispatch(loadUser({\n            alias          : alias,\n            contract       : contract,\n            accounts       : accounts,\n            account        : accounts[0]\n        }));\n    },\n\n    async loadAccounts(web3) {\n        return await web3.eth.getAccounts();\n        // let i = 1;\n        // for (let account of accounts) {\n        //     this.accountsSelector.push(\n        //         { label: account, value: i }\n        //     );\n        //     i += 1;\n        // }\n    },\n\n    async findAlias(account) {\n        const dir = aliasDirectory(account) + 'data.txt';\n        try {\n          const filesResponse = await IPFSDatabase.readFile(dir);\n          const content = String.fromCharCode(... new Uint8Array(filesResponse));\n          const alias = content.split('=')[1];\n          return alias;\n        } catch (e) {\n          return '';\n        }\n      },\n    \n      async findContracts(account) {\n        const dir = contractDirectory(account) + 'contract.txt';\n        try {\n          return await IPFSDatabase.readFile(dir);\n        } catch (e) {\n          return '';\n        }\n      },\n    \n      async getEthereumBalance(account, web3) {\n        return await web3.utils.fromWei(\n          await web3.eth.getBalance(account), 'ether');\n      }\n\n}\n\nexport default UserService;","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        // const web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n        const web3 = new Web3(window.web3.currentProvider);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = new Web3(window.web3.currentProvider);\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\n  export default getWeb3;","import React from 'react';\nimport { IPFSDatabase } from '../../db/ipfs.db';\nimport { EncryptionUtils } from '../../encryption/encrypt.service';\nimport { ContractService } from '../../service/contract.service';\n\nimport { contractDirectory, uploadDirectory, inboxDirectory } from '../../constants';\n\nimport { If, Else, Elif } from 'rc-if-else';\n\nimport {saveAs} from 'file-saver';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { faTrashAlt, faDownload, faInbox, faUpload } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { Spinner } from 'reactstrap';\n\nimport { Button, ButtonGroup } from 'reactstrap';\n\nimport './inbox.component.css';\n\nclass InboxComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            encryptedInbox: [],\n            uploadInbox: [],\n            downloadPending: [],\n            showInbox: 'uploads',\n        };\n        if (props.user) {\n            this.readUploads();\n            this.readInbox();\n        }\n    }\n\n    async onDownload(item) {\n        if (this.state.showInbox === 'uploads') {\n            const filepath = uploadDirectory(this.props.user.account) + item.filename;\n            // get the file from IPFS\n            const file = await IPFSDatabase.readFile(filepath);\n            this.download(file, item.filename);\n        } else {\n            this.updateDownloadPendingState(item, true);\n            const filepath = inboxDirectory(this.props.user.account) + item.sender + '/' + item.filename;\n            const file = await IPFSDatabase.readFile(filepath);\n\n            const contractAddress = this.props.user.contract;\n            const senderContractFileLoc = contractDirectory(item.sender) + 'contract.txt';\n            const senderContractAddress = await IPFSDatabase.readFile(senderContractFileLoc);\n\n            // create shared key\n            const sharedKey = await ContractService.createSharedKey(\n                this.props.web3, this.props.user.account, \n                item.sender.toString(), contractAddress, \n                senderContractAddress.toString()\n            );\n\n            const decryptedMessage = await EncryptionUtils.decrypt(\n                sharedKey, file\n            );\n\n            this.updateDownloadPendingState(item, false);\n            this.download(new Uint8Array(decryptedMessage.data), item.filename);\n        }\n    }\n\n    download(file, filename) {\n        const mime = require('mime-types');\n        const type = mime.lookup(filename);\n        const blob = new Blob([file], {type: type});\n        saveAs(blob, filename);\n    }\n\n    updateDownloadPendingState(item, downloadPending) {\n        this.setState(state => {\n            const downloadPendingList = state.encryptedInbox;\n            const indexOfItem = downloadPendingList.findIndex((obj => \n                obj.filename == item.filename && obj.sender === item.sender    \n            ));\n            downloadPendingList[indexOfItem].downloadPending = downloadPending;\n            return {\n                downloadPendingList,\n            };\n        });\n    }\n\n    async onDelete(item) {\n        // TODO\n        let filepath = uploadDirectory(this.props.user.account) + item.filename;\n        if (this.state.showInbox === 'encrypted') {\n            filepath = inboxDirectory(this.props.user.account) + item.sender + '/' + item.filename;\n            // remove from array\n            const inbox = [...this.state.encryptedInbox];\n            const index = inbox.indexOf(item);\n            inbox.splice(index, 1);\n            this.setState({encryptedInbox: inbox});\n        } else {\n            // remove from array\n            const inbox = [...this.state.uploadInbox];\n            const index = inbox.indexOf(item);\n            inbox.splice(index, 1);\n            this.setState({uploadInbox: inbox});\n        }\n        await IPFSDatabase.deleteFile(filepath, (err, res) => {\n            if (err) {\n                console.log('could not remove file ' + err);\n            }\n        });\n    }\n\n    createData(sender, filename) {\n        return { sender, filename, downloadPending: false };\n    }\n\n    async readUploads() {\n        // clear inbox contents\n        this.setState({ uploadInbox: [] });\n        let items = [];\n        const dir = uploadDirectory(this.props.user.account);\n        // get current ethereum address\n        const parentResponse = await IPFSDatabase.readDirectory(dir);\n        for (const senderRes of parentResponse) {\n            items.push(this.createData('upload', senderRes.name));\n        }\n        this.setState({uploadInbox: items});\n    }\n\n    async readInbox() {\n        const account = this.props.user.account;\n        // clear inbox contents\n        this.setState({ encryptedInbox: [] });\n        let items = [];\n        const dir = inboxDirectory(this.props.user.account);\n        // get current ethereum address\n        const parentResponse = await IPFSDatabase.readDirectory(dir);\n        for (const senderRes of parentResponse) {\n            const subdir = dir + senderRes.name;\n            const senderResponse = await IPFSDatabase.readDirectory(subdir);\n            for (const childRes of senderResponse) {\n                items.push(this.createData(senderRes.name, childRes.name));\n            }\n        }\n        this.setState({encryptedInbox: items});\n\n        // if (!items.length === 0) {\n        //     this.forceUpdate();\n        // }\n    }\n\n    async onToggleFileView(e) {\n        const fileView = this.state.showInbox;\n        if (fileView === 'uploads' && e.target.id === 'inbox') {\n            this.setState({showInbox: 'encrypted'});\n            await this.readInbox(this.props.ethereumAddress);\n        } else if (fileView === 'encrypted' && e.target.id === 'uploads') {\n            this.setState({showInbox: 'uploads'});\n            await this.readUploads(this.props.ethereumAddress);\n        }\n    }\n\n    render() {\n        if (!this.props.user) {\n            return (\n                <div>\n                    <p>Loading......</p>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <div className=\"button-container\">\n                        <ButtonGroup>\n                            <Button className=\"select-view-button\" id='uploads' onClick={this.onToggleFileView.bind(this)}>\n                                <FontAwesomeIcon icon={faUpload} />\n                                Uploads ({this.state.uploadInbox.length})\n                            </Button>\n                            <Button className=\"select-view-button\" id='inbox' onClick={this.onToggleFileView.bind(this)}>\n                                <FontAwesomeIcon icon={faInbox} />\n                                Inbox ({this.state.encryptedInbox.length})\n                            </Button>\n                        </ButtonGroup>\n                    </div>\n                    <If condition={this.state.showInbox === 'encrypted'}>\n                        <div className=\"inbox-container\">\n                            <div className=\"inbox-list-container\">\n                                <If condition={this.state.encryptedInbox.length === 0}>\n                                    Inbox is empty\n                                    <Else>\n                                        <TableContainer component={Paper}>\n                                            <Table className=\"inbox-table\" aria-label=\"Inbox\">\n                                                <TableHead>\n                                                    <TableRow>\n                                                        <TableCell>Sender</TableCell>\n                                                        <TableCell>File name</TableCell>\n                                                        <TableCell>Download</TableCell>\n                                                        <TableCell>Delete</TableCell>\n                                                    </TableRow>\n                                                </TableHead>\n                                                <TableBody>\n                                                    {this.state.encryptedInbox.map(item => (\n                                                        <TableRow key={item.sender}>\n                                                            <TableCell>{item.sender}</TableCell>\n                                                            <TableCell>{item.filename}</TableCell>\n                                                            <TableCell>\n                                                                <If condition={item.downloadPending === true}>\n                                                                    <Spinner color=\"primary\" />\n                                                                    <Else>\n                                                                        <button className=\"download button\" onClick={() => this.onDownload(item)}>\n                                                                            <FontAwesomeIcon icon={faDownload} />\n                                                                        </button>\n                                                                    </Else>\n                                                                </If>\n                                                            </TableCell>\n                                                            <TableCell>\n                                                                <button className=\"delete button\" onClick={() => this.onDelete(item)}>\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\n                                                                </button>\n                                                            </TableCell>\n                                                        </TableRow>\n                                                    ))}\n                                                </TableBody>\n                                            </Table>\n                                        </TableContainer>\n                                    </Else>\n                                </If>\n                            </div>\n                        </div>\n                    </If>\n                    <If condition={this.state.showInbox === 'uploads'}>\n                        <div className=\"inbox-container\">\n                        <div className=\"inbox-list-container\">\n                            <If condition={this.state.uploadInbox.length === 0}>\n                                You have not uploaded any files.\n                                <Else>\n                                    <TableContainer component={Paper}>\n                                        <Table className=\"inbox-table\" aria-label=\"Inbox\">\n                                            <TableHead>\n                                                <TableRow>\n                                                    <TableCell>File name</TableCell>\n                                                    <TableCell>Download</TableCell>\n                                                    <TableCell>Delete</TableCell>\n                                                </TableRow>\n                                            </TableHead>\n                                            <TableBody>\n                                                {this.state.uploadInbox.map(item => (\n                                                    <TableRow key={item.sender}>\n                                                        <TableCell>{item.filename}</TableCell>\n                                                        <TableCell>\n                                                            <button className=\"download button\" onClick={() => this.onDownload(item)}>\n                                                                <FontAwesomeIcon icon={faDownload} />\n                                                            </button>\n                                                        </TableCell>\n                                                        <TableCell>\n                                                            <button className=\"delete button\" onClick={() => this.onDelete(item)}>\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\n                                                            </button>\n                                                        </TableCell>\n                                                    </TableRow>\n                                                ))}\n                                            </TableBody>\n                                        </Table>\n                                    </TableContainer>\n                                </Else>\n                            </If>\n                        </div>\n                    </div>\n                    </If>\n            </div>\n            );\n        }\n    }\n}\n\nexport default InboxComponent;","import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n    Card, CardImg, CardText, CardBody,\n    CardTitle, Button,\n    Modal, ModalHeader, ModalBody, ModalFooter\n  } from 'reactstrap';\n\nimport { Spinner } from 'reactstrap';\n\nimport { If, Else } from 'rc-if-else';\nimport './contract-card.component.css';\n\nclass ContractCardComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            deployingContract: false\n        };\n    }\n\n    toggle() {\n        this.setState({modal: true});\n    }\n\n    async confirm() {\n        this.setState({modal: false, deployingContract: true});\n        await this.props.onConfirm();\n        this.setState({deployingContract: false});\n    }\n\n    cancel() {\n        this.setState({modal: false});\n    }\n\n    render() {\n        this.toggle = this.toggle.bind(this);\n        this.cancel = this.cancel.bind(this);\n        return (\n            <div className=\"contracts-container\">\n                <div>\n                    <Card className=\"contract-card\">\n                    {/* require(this.props.headerImage)} */}\n                        <CardImg className=\"contract-card-img\" width=\"50%\" \n                                src={this.props.headerImage} \n                                alt={this.props.contractName} />\n                        <CardBody>\n                            <CardTitle>{this.props.contractName}</CardTitle>\n                            <CardText>\n                                {this.props.cardText}\n                            </CardText>\n                            <If condition={this.state.deployingContract}>\n                                <span>\n                                    Deploying contract\n                                </span>\n                                <Spinner type=\"grow\" color=\"primary\" />\n                                <Else>\n                                    <If condition={this.props.contractDeployed === false}>\n                                        <Button color=\"primary\" onClick={this.toggle}>Submit</Button>\n                                    </If>\n                                </Else>\n                            </If>\n                            <Modal isOpen={this.state.modal} fade={false}\n                                toggle={this.toggle} className=\"modal-container\">\n                                <ModalHeader toggle={this.toggle}>\n                                    Deploy Contract\n                                </ModalHeader>\n                                <ModalBody>\n                                    This will cost ethereum in order to deploy the contract.\n                                </ModalBody>\n                                <ModalFooter className=\"modal-footer-container\">\n                                    <Button className=\"confirm action-button\" onClick={this.confirm.bind(this)} color=\"success\">\n                                        Confirm\n                                    </Button>\n                                    <Button className=\"cancel action-button\" onClick={this.cancel} color=\"danger\">\n                                        Cancel\n                                    </Button>\n                                </ModalFooter>\n                            </Modal>\n                        </CardBody>\n                    </Card>\n                </div>\n            </div>\n        );\n    }\n}\n\nContractCardComponent.propTypes = {\n    headerImage: PropTypes.string,\n    contractName: PropTypes.string,\n    cardText: PropTypes.string,\n    onConfirm: PropTypes.func\n};\nexport default ContractCardComponent;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { If, Else } from 'rc-if-else';\n\nimport LockImage from '../../resources/lock_icon.jpg';\nimport ContractCardComponent from './card/contract-card.component';\nimport {ContractService} from '../../service/contract.service';\n\nimport './contracts.component.css';\n\nclass ContractsComponent extends React.Component {\n\n    contractCardText = 'Generate encryption keys and store them in a smart contract deployed to the Ethereum blockchain.This contract then can then be applied to perform assymetric encryption, and send an encrypted file to another user.';\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            contractDeployed: false\n        };\n        if (props.user && props.user.contract) {\n            this.contractCardText = 'Contract deployed at ' + props.user.contract;\n            this.setState({contractDeployed: true});\n        }\n    }\n\n    async generateEncryptionKeysContract() {\n        const contractResult = await ContractService.generateKeys(\n            this.props.web3,\n            this.props.user.account);\n        await this.props.contractHandler(contractResult);\n    }\n\n    render() {\n        if (!this.props.user) {\n            return (\n                <div>\n                    Loading...\n                </div>\n            );\n        }\n        return (\n            <div className=\"contracts-container\">\n                <div className=\"contracts-header\">\n                    Contracts\n                </div>\n                <If condition={this.props.user.contract === ''}>\n                    <div className=\"card-container\">\n                        <ContractCardComponent \n                            headerImage      = {LockImage}\n                            contractName     = 'Encryption Keys Contract'\n                            cardText         = {this.contractCardText}\n                            onConfirm        = {this.generateEncryptionKeysContract.bind(this)}\n                            contractDeployed = {this.state.contractDeployed}\n                        />\n                    </div>\n                    <Else>\n                        <div className=\"card-container\">\n                            <ContractCardComponent \n                                headerImage      = {LockImage}\n                                contractName     = 'Encryption Keys Contract'\n                                cardText         = {this.contractCardText}\n                                contract         = {this.props.user.contract}\n                                user             = {this.props.user}\n                            />\n                        </div>\n                    </Else>\n                </If>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<ContractCardComponent />, document.getElementById('root'));\nexport default ContractsComponent;","import PropTypes from 'prop-types';\nimport React from \"react\";\nimport { If, Else } from 'rc-if-else';\n\nimport Select from 'react-select';\nimport { Alert, Button } from 'reactstrap';\n\nimport { faCopy, faLock, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport './header.component.css';\n\nclass HeaderComponent extends React.Component {\n\n    accountsSelector = [];\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showAlert: false,\n            user: null\n        };\n    }\n\n    async componentWillMount() {\n        this.loadAccounts();\n    }\n\n    loadAccounts() {\n        if (this.props.user && this.props.user.accounts) {\n            let i = 1;\n            for (let account of this.props.user.accounts) {\n                this.accountsSelector.push(\n                    { label: account, value: i }\n                );\n                i += 1;\n            }\n            if (this.props.user.accounts.length === 1) {\n\n            }\n        }\n    }\n\n    toggleAbout(e) {\n        const toggleState = e.target.id === 'home' ? false : true;\n        this.props.toggleAbout(toggleState);\n    }\n\n    handleSelectAccount(state) {\n        alert('not yet implemented');\n    }\n\n    copyText() {\n        navigator.clipboard.writeText(this.props.user.account);\n        // alert for 5 seconds\n        this.setState({showAlert: true});\n        setTimeout(function() {\n          this.setState({showAlert: false});\n        }.bind(this), 5000);\n    }\n\n    render() {\n        this.toggleAbout = this.toggleAbout.bind(this);\n        if (!this.props.user) {\n            return (\n                <div>\n                    LOADING\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"header-container\">\n                    <div className=\"header header-container-main\">\n                        <div className=\"left-container\">\n                            <div className=\"left app-name\">\n                                IRIS\n                            </div>\n                            <div className=\"nav-buttons\">\n                                <button id='home' onClick={this.toggleAbout}>\n                                    Home\n                                </button>\n                                <button id='about' onClick={this.toggleAbout}>\n                                    About\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"header-container-main-details\">\n                            <div className=\"alias-display-container\">\n                                <p>\n                                    {this.props.user.alias}\n                                </p>\n                                {/* <If condition={this.props.user.alias !== ''}>\n                                    <FontAwesomeIcon className=\"edit-icon\" icon={ faEdit } />                               \n                                </If> */}\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"header header-container-secondary\">\n                        <div className=\"accounts-container\">\n                            <div className=\"account-selector-container\">\n                                {/* If only a single account is provided, select and display it,\n                                    otherwise show dropdown selector */}\n                                <If condition={this.props.user.accounts.length === 1}>\n                                    <span className=\"account-container\">\n                                        {this.props.user.accounts[0]}\n                                    </span>\n                                    <Else>\n                                        <Select className=\"dropdown\"\n                                                options={this.props.accountsSelector} GenerateKeys\n                                                onChange={this.handleSelectAccount.bind(this)}>\n                                        </Select>\n                                    </Else>\n                                </If>\n                            </div>\n                            <div className=\"copy-container\">\n                                <FontAwesomeIcon className=\"copy\" onClick={this.copyText.bind(this)} icon={faCopy} />\n                            </div>\n                        </div>\n                        <If condition={this.props.user.contract}>\n                            <div className=\"contract-icon-container\">\n                                <FontAwesomeIcon className=\"contract-icon\" icon={faLock} />\n                            </div>\n                        </If>\n                        <Alert className=\"copy-alert\" color=\"info\" isOpen={this.state.showAlert}>\n                            <span>Copied!</span>\n                        </Alert>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nHeaderComponent.propTypes = {\n    ethereumBalance: PropTypes.string,\n    alias: PropTypes.string,\n    selectAccount: PropTypes.func,\n    contracts: PropTypes.object\n};\n\nexport default HeaderComponent;","import PropTypes from 'prop-types';\nimport React from \"react\";\n\nimport { faUpload, faFileContract, faInbox, faUsers } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { viewConstants } from '../../constants';\n\nimport './sidebar.container.css';\n\nclass SidebarComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"sidebar-container\">\n                <div className=\"sidebar-button-container\">\n                  <div className=\"sidebar-item\">\n                    <FontAwesomeIcon className=\"sidebar-icon\" icon={faUpload} />\n                    <input type=\"button\" id={viewConstants.UPLOAD} value={viewConstants.UPLOAD} onClick={this.props.toggleView} />\n                  </div>\n                  <div className=\"sidebar-item\">\n                    <FontAwesomeIcon className=\"sidebar-icon\" icon={faInbox} />\n                    <input type=\"button\" id={viewConstants.INBOX} value={viewConstants.INBOX} onClick={this.props.toggleView} />\n                  </div>\n                  <div className=\"sidebar-item\">\n                    <FontAwesomeIcon className=\"sidebar-icon\" icon={faFileContract} />\n                    <input type=\"button\" id={viewConstants.CONTRACTS} value={viewConstants.CONTRACTS} onClick={this.props.toggleView} />\n                  </div>\n                  {/* <div className=\"sidebar-item\">\n                    <FontAwesomeIcon className=\"sidebar-icon\" icon={faUsers} />\n                    <input type=\"button\" id={viewConstants.PEERS} value={viewConstants.PEERS} onClick={this.props.toggleView} />\n                  </div> */}\n                </div>\n                <div className=\"footer-container\">\n                  <span>\n                    <a href=\"https://github.com/driemworks\">driemworks</a> 2020\n                  </span>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nSidebarComponent.propTypes = {\n    toggleView: PropTypes.func\n}\n\nexport default SidebarComponent;","import React, { Component } from \"react\";\nimport './peers.component.css';\n\nclass PeersComponent extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return(\n            <div>\n                Not yet implemented\n            </div>\n        );\n    }\n}\n\nexport default PeersComponent;","import PropTypes from 'prop-types';\nimport React, { Component } from \"react\";\n\nimport './flip-card.component.css';\n\n// import { faUpload, faFileContract, faInbox, faUsers } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass FlipCardComponent extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return(\n            <div className=\"flip-card\">\n                <div class=\"flip-card-inner\">\n                    <div className=\"flip-card-front\">\n                        <h2>\n                            {this.props.headerText}\n                        </h2>\n                        <FontAwesomeIcon className=\"icon\" icon={this.props.icon} />\n                    </div>\n                    <div className=\"flip-card-back\">\n                        {this.props.text}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FlipCardComponent;\n","import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport { Jumbotron, Button } from 'reactstrap';\n\nimport './about.component.css';\nimport FlipCardComponent from \"../flip-card/flip-card.component\";\n\nimport { faLock, faProjectDiagram } from \"@fortawesome/free-solid-svg-icons\";\n\nclass AboutComponent extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    goHome() {\n        this.props.action(false);\n    }\n\n    render() {\n        return (\n            <div className=\"about-container\">\n                <div className=\"jumbotron-container\">\n                    <Jumbotron>\n                        <h1>Secure file sharing</h1>\n                        <div className=\"jumbotron-text\">\n                            <p>\n                                Iris is a platform to allow users to securely share files\n                                using IPFS and ethereum. After creating your own public/private encryption keys\n                                (under contracts in the sidebar), you can then asymetrically encrypt a file intended\n                                for a specific user identified by their ethereum account (who must also have a contract deployed).\n                                This creates a file that can only be encrypted by the desired party, while still uploading the content\n                                to IPFS.\n                            </p>\n                        </div>\n                        <Button onClick={this.goHome.bind(this)} color=\"primary\">\n                            Get started\n                        </Button>\n                    </Jumbotron>\n                </div>\n                <div className=\"about-body\">\n                    <div className=\"left details\">\n                        <FlipCardComponent \n                            headerText = 'Secure'\n                            icon       = {faLock}\n                            text       = \"Iris provides user the ability to asymetrically encrypt files before sending \n                                            it to another user; creating an encrypted file that is can only \n                                            be decrypted by the intended party. This is accomplished by storing a user's encryption key \n                                            in a contract deployed to ethereum, where your private key is only accessible by you.\"\n                        />\n                    </div>\n                    <div className=\"middle details\">\n                        <FlipCardComponent \n                            headerText = 'Decentralized'\n                            icon       = {faProjectDiagram}\n                            text       = 'Your files are uploaded to IPFS and user management is achieved through your ethereum account.'\n                        />\n                    </div>\n                    {/* <div className=\"right details\">\n                        <FlipCardComponent \n                            headerText = 'Decentralized'\n                            icon       = {faProjectDiagram}\n                            text       = 'This is another test'\n                        />\n                    </div> */}\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<FlipCardComponent />, document.getElementById('root'));\n\nexport default AboutComponent;","import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport UserService from './service/user.service';\n\nimport { If, Else } from 'rc-if-else'\n\nimport { viewConstants } from './constants';\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport GenerateKeys from './components/generateKeys/generateKeys.component';\nimport GenerateAlias from './components/generateAlias/generateAlias.component';\nimport UploadComponent from './components/upload/upload.component';\nimport InboxComponent from './components/inbox/inbox.component';\nimport ContractsComponent from './components/contracts/contracts.component';\nimport HeaderComponent from \"./components/header/header.component\";\nimport SidebarComponent from \"./components/sidebar/sidebar.container\";\nimport PeersComponent from \"./components/peers/peers.component\";\nimport AboutComponent from \"./components/about/about.component\";\n\nimport \"./App.css\";\n\nimport store from './state/store/index';\nimport { loadUser } from './state/actions/index';\n\n\nclass App extends Component {\n\n  accountsSelector = [];\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      web3: null,\n      isWeb3Connected: false,\n      selectedView: viewConstants.INBOX,\n      showAbout: true\n    };\n\n    store.subscribe(() => {\n      const user = store.getState().user;\n      // set user state\n      this.setState({\n          user: user\n      });\n\n      // set default view\n      if (user.alias === '') {\n        this.setState({ selectedView: viewConstants.ALIAS });\n      }\n    });\n  }\n\n  componentDidMount = async () => {\n    const web3 = await getWeb3();\n    this.setState({ web3 });\n    web3.eth.net.isListening().then(\n      () => this.setState({ isWeb3Connected: true })\n    ).catch(e => console.log('web3 not connected'));\n    await UserService.loadUser(web3);\n  }\n\n  aliasHandler(e) {\n    const updatedUser = this.state.user;\n    updatedUser.alias = e;\n    store.dispatch(loadUser(updatedUser));\n    this.setState({selectedView: viewConstants.INBOX});\n  }\n\n  contractAddressHandler(e) {\n    const updatedUser = this.state.user;\n    updatedUser.contract = e;\n    store.dispatch(loadUser(updatedUser));\n  }\n\n  toggleView(event) {\n      this.setState({selectedView: event.target.id});\n  }\n\n  toggleAbout(value) {\n    this.setState({ showAbout: value });\n  }\n\n  renderView() {\n    let view = <div>No view selected</div>\n    if (this.state.selectedView === viewConstants.UPLOAD) {\n      view = <UploadComponent \n                web3 = {this.state.web3}\n                user = {this.state.user}\n             />;\n    } else if (this.state.selectedView === viewConstants.INBOX) {\n      view = <InboxComponent\n                web3 = {this.state.web3}\n                user = {this.state.user}\n             />;\n    } else if (this.state.selectedView === viewConstants.CONTRACTS) {\n        view = <ContractsComponent\n                contractHandler = {this.contractAddressHandler.bind(this)}\n                web3            = {this.state.web3}\n                user            = {this.state.user}\n               />;\n    } else if (this.state.selectedView === viewConstants.ALIAS) {\n      view = <GenerateAlias \n                aliasHandler = {this.aliasHandler.bind(this)}\n                user         = {this.state.user}\n              />;\n    } else if (this.state.selectedView === viewConstants.PEERS) {\n      view = <PeersComponent />\n    }\n    return view;\n  }\n\n  render() {\n    this.toggleView  = this.toggleView.bind(this);\n    this.toggleAbout = this.toggleAbout.bind(this);\n    const renderView = this.renderView();\n    // const user = store.getState().user;\n    if (!this.state.user) {\n      return (\n        <div>\n          Loading...\n        </div>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"header-container\">\n          <HeaderComponent \n            user        = {this.state.user}\n            toggleAbout = {this.toggleAbout}\n          />\n        </div>\n        <If condition={this.state.showAbout === true}>\n          <AboutComponent\n            action       = {this.toggleAbout}\n          />\n          <Else>\n            <div className=\"app-container\">\n              <div className=\"sidebard-container\">\n                <SidebarComponent \n                  toggleView = {this.toggleView}\n                />\n              </div>\n            <div className=\"render-view-container\">\n              {renderView}\n            </div>\n          </div>\n          </Else>\n        </If>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<GenerateKeys />, document.getElementById('root'));\nReactDOM.render(<UploadComponent />, document.getElementById('root'));\nReactDOM.render(<InboxComponent />, document.getElementById('root'));\nReactDOM.render(<GenerateAlias />, document.getElementById('root'));\nReactDOM.render(<ContractsComponent />, document.getElementById('root'));\nReactDOM.render(<HeaderComponent />, document.getElementById('root'));\nReactDOM.render(<SidebarComponent />, document.getElementById('root'));\nReactDOM.render(<PeersComponent />, document.getElementById('root'));\nReactDOM.render(<AboutComponent />, document.getElementById('root'));\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './state/store/index';\nimport index from './state/index';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './bootstrap-4.3.1-dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { box, randomBytes } from 'tweetnacl';\nimport {\n  decodeUTF8,\n  encodeUTF8,\n  decodeBase64,\n  encodeBase64\n} from 'tweetnacl-util';\n\nimport truffleContract from '@truffle/contract';\nimport EncryptionKeys from '../contracts/EncryptionKeys.json';\n\nexport const EncryptionUtils = {\n    newNonce: function() {\n        return randomBytes(box.nonceLength);  \n    },\n    \n    generateKeyPair: function() {\n        return box.keyPair();\n    },\n\n    /**\n     * Encrypt the json with the given keys\n     * @param {*} secretOrSharedKey \n     * @param {*} json \n     * @param {*} key \n     */\n    encrypt: function(secretOrSharedKey, json, key) {\n        const nonce = this.newNonce();\n        const messageUint8 = decodeUTF8(JSON.stringify(json));\n        const encrypted = key ? box(messageUint8, nonce, key, secretOrSharedKey) \n                                : box.after(messageUint8, nonce, secretOrSharedKey);\n        \n        const fullMessage = new Uint8Array(nonce.length + encrypted.length);\n        fullMessage.set(nonce);\n        fullMessage.set(encrypted, nonce.length);\n\n        const base64FullMessage = encodeBase64(fullMessage);\n        // console.log(base64FullMessage);\n        return base64FullMessage;\n    },\n\n    /**\n     * Decrypt the message with the given keys\n     * @param {*} secretOrSharedKey \n     * @param {*} messageWithNonce \n     * @param {*} key \n     */\n    decrypt: function(secretOrSharedKey, messageWithNonce, key) {\n        const messageWithNonceAsUint8Array = decodeBase64(messageWithNonce);\n        const nonce = messageWithNonceAsUint8Array.slice(0, box.nonceLength);\n        const message = messageWithNonceAsUint8Array.slice(box.nonceLength, \n            messageWithNonce.length);\n\n        const decrypted = key ? box.open(message, nonce, key, secretOrSharedKey)\n                                : box.open.after(message, nonce, secretOrSharedKey);\n\n        if (!decrypted) {\n            throw new Error('Could not decrypt message.');\n        }\n\n        const base64DecryptedMessage = encodeUTF8(decrypted);\n        return JSON.parse(base64DecryptedMessage);\n    }\n    \n}\n","// components to render\nexport const viewConstants = {\n    UPLOAD    : 'UPLOAD',\n    INBOX     : 'INBOX',\n    CONTRACTS : 'CONTRACTS',\n    ALIAS     : 'ALIAS',\n    PEERS     : 'PEERS'\n}\n\n// hash of the content directory\nexport const content = '/iris-content-directory/';\n\n// sub directories\nexport function aliasDirectory(account) {\n    return content + account + '/usr/';\n}\n\nexport function contractDirectory(account) {\n    return content + account + '/contract/';\n}\n\nexport function uploadDirectory(account) {\n    return content + account + '/uploads/';\n}\n\nexport function inboxDirectory(account) {\n    return content + account + '/inbox/';\n}\n\nexport function resources() {\n    return content + 'resources/'\n}\n\n","import React from \"react\";\nimport { IPFSDatabase } from '../../db/ipfs.db';\nimport { If, Else } from 'rc-if-else';\nimport './generateAlias.component.css';\nimport { aliasDirectory, inboxDirectory, uploadDirectory, resources } from \"../../constants\";\n\nclass GenerateAlias extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            creatingAlias: false\n        };\n    }\n\n    setAlias(e) {\n        this.setState({alias: e.target.value});\n    }\n\n    createAliasBox() {\n        this.setState({creatingAlias: true});\n    }\n\n    async generateAlias() {\n        // verify alias uniqueness\n\n        // create user directories\n        const aliasDir = aliasDirectory(this.props.user.account);\n        const inboxDir = inboxDirectory(this.props.user.account);\n        const uploadsDir = uploadDirectory(this.props.user.account);\n\n        await IPFSDatabase.createDirectory(aliasDir);\n        await IPFSDatabase.createDirectory(inboxDir);\n        await IPFSDatabase.createDirectory(uploadsDir);\n        const fileContent = 'alias=' + this.state.alias;\n        await IPFSDatabase.addFile(aliasDir, Buffer.from(fileContent), 'data.txt', (err, res) => {\n        \n        });\n\n        // add to aliases file\n        this.props.aliasHandler(this.state.alias);\n    }\n\n    async loadPeers() {\n        let peers = [];\n        const aliasesFile = resources() + 'aliases.txt';\n        // find all aliases...\n        // /iris-content-directory/<hash>/usr/alias.txt\n        // maybe create a new file... /iris-content-directory/resources/aliases.txt\n    }\n\n    render() {\n        if (!this.props.user) {\n            return (\n                <div>\n                    Loading...\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"generate-alias-container\">\n                    <If condition={this.props.user.alias === ''}>\n                        <div className=\"btn-container\">\n                            <div className=\"alias-container\">\n                                <If condition={this.state.creatingAlias === false}>\n                                    <button className=\"btn generate-keys-btn\" onClick={this.createAliasBox.bind(this)}>\n                                        Create Alias\n                                    </button>\n                                    <Else>\n                                        <p>\n                                            Create alias for account\n                                        </p>\n                                        <input className=\"alias-input-box\" type=\"textbox\" placeholder=\"alias\" onChange={this.setAlias.bind(this)} />\n                                        <button onClick={this.generateAlias.bind(this)}>\n                                            Submit\n                                        </button>\n                                    </Else>\n                                </If>\n                            </div>\n                        </div>\n                    </If>\n                </div>\n            );\n        }\n    }\n}\n\nexport default GenerateAlias;\n","import React from \"react\";\nimport {IPFSDatabase} from '../../db/ipfs.db';\nimport { If, Else } from 'rc-if-else';\nimport { EncryptionUtils } from '../../encryption/encrypt.service';\nimport { ContractService } from '../../service/contract.service';\n\nimport { Modal, ModalHeader, ModalBody, ModalFooter,\n          Alert, Button, ButtonDropdown, DropdownToggle, \n          DropdownMenu, DropdownItem\n        } from 'reactstrap';\nimport { faTimesCircle, faUserLock } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { Spinner } from 'reactstrap';\n\nimport store from '../../state/store/index';\nimport { addToQueue, removeFromQueue } from '../../state/actions/index';\n\nimport './upload.component.css';\nimport UploadQueueComponent from \"./queue/upload-queue.component\";\nimport ReactDOM from 'react-dom';\nimport { uploadDirectory, inboxDirectory, contractDirectory } from \"../../constants\";\n\nclass UploadComponent extends React.Component {\n\n    files = [];\n    uploadSelectTypes = [\n        {\n            label: '',\n            selector: ''\n        }\n    ];\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            recipientEthereumAccount: '',\n            recipientContractAddress: '',\n            accountSelected: false,\n            enableEncryption: false,\n            dropdownOpen: false,\n            showAlert: false,\n            modal: false,\n            uploading: false,\n            uploadQueue: []\n        };\n        store.subscribe(() => {\n            this.setState({ uploadQueue: store.getState().uploadQueue });\n        });\n    }\n\n    /**\n     * Upload a file\n     * @param event \n     */\n    async captureFile(event) {\n        event.stopPropagation();\n        event.preventDefault();\n\n        const file = await event.target.files[0];\n        this.setState({ uploadingFile: true, file: file });\n\n        let reader = new window.FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.onloadend = () => { this.convertToBuffer(reader); }\n        this.setState({uploadFileName: file.name, uploadingFile: false });\n    }\n\n    /**\n     * convert the reader to a buffer and set the state\n     */\n    convertToBuffer = async(reader) => {\n        const buffer = Buffer.from(reader.result);\n        this.setState({buffer: buffer});\n    }\n\n    /**\n     * Add the uploaded file to IPFS\n     */\n    async onIPFSSubmit(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        \n        this.setState({uploading: true});\n        // default behavior: upload file unencrypted and add to user's upload directory\n        let uploadContent = Buffer.from(this.state.buffer);\n        let dir = uploadDirectory(this.props.user.account);\n\n        if (this.state.enableEncryption) {\n            const item = {\n                startTime : new Date().getTime(),\n                filename: this.state.uploadFileName,\n                recipient: this.state.recipientEthereumAddress\n            };\n            store.dispatch(addToQueue(item));\n            uploadContent = await this.getEncryptedFile();\n            store.dispatch(removeFromQueue(item));\n            dir = inboxDirectory(this.state.recipientEthereumAddress) + this.props.user.account + '/';\n        }\n        // add to recipient's inbox\n        // make sure the directory exists\n        await IPFSDatabase.createDirectory(dir);\n        await this.addFile(dir, Buffer.from(uploadContent));\n        this.showAlert();\n        this.setState({accountSelected: false, file: null, uploading: false});\n    }\n\n    async getEncryptedFile() {\n        const recipientContractAddress = this.state.recipientContractAddress;\n        const senderContractAddress = this.props.user.contract;\n        if (recipientContractAddress !== '' && senderContractAddress !== '') {\n            const sharedEncryptionKey = await ContractService.createSharedKey(\n                this.props.web3, this.props.user.account, \n                this.state.recipientEthereumAddress, \n                senderContractAddress, \n                recipientContractAddress\n            );\n            // encrypt the buffer\n            const encrypted = EncryptionUtils.encrypt(sharedEncryptionKey, this.state.buffer);\n            return encrypted;\n        } else {\n            alert('Could not find a public/private keys for the specified account');\n        }\n    }\n\n    async addFile(dir, content) {\n        await IPFSDatabase.addFile(dir, content, this.state.uploadFileName,\n            (err, res) => {\n                if (err) {\n                    console.log(err);\n                } else {\n                    console.log(res);\n                    this.setState({ recipientContractAddress: '' });\n                }\n            }\n        );\n    }\n\n    setRecipient(event) {\n        const recipientAcctId = event.target.value;\n        this.setState({ recipientEthereumAddress: recipientAcctId });\n        if (this.state.accountSelected) {\n           this.setState({accountSelected: false});\n        }\n    }\n\n    async verifyRecipient(e) {\n        const recipientAcctId = e.target.value;\n        if (recipientAcctId !== \"\") {\n            this.setState({ recipientEthereumAddress: recipientAcctId, \n                            accountSelected: recipientAcctId !== \"\" });\n            const dir = contractDirectory(recipientAcctId) + 'contract.txt';\n            const res = await IPFSDatabase.readFile(dir);\n            if (!res) {\n                this.setState({verified: false});\n            } else {\n                this.setState({verified: true});\n                this.setState({recipientContractAddress: res.toString()});\n            }\n        }\n    }\n\n    toggleDropdown() {\n        this.setState({\n            dropdownOpen: !this.state.dropdownOpen\n        });\n    }\n\n    onToggleEncryption() {\n        this.setState({enableEncryption: true});\n    }\n\n    clearFile() {\n        this.setState({ file: null, enableEncryption: false, accountSelected: false });\n    }\n\n    showAlert() {\n        this.setState({showAlert: true});\n        setTimeout(function() {\n            this.setState({showAlert: false});\n        }.bind(this), 5000); \n    }\n\n    showModal() {\n        const modalState = this.state.modal;\n        this.setState({ modal: !modalState });\n    }\n\n    onConfirm() {\n        this.setState({ modal: false, file: null,accountSelected: false, enableEncryption: false });\n        this.onIPFSSubmit();\n    }\n\n    onCancel() {\n        this.setState({ modal: false });\n    }\n\n    render() {\n        this.toggleDropdown = this.toggleDropdown.bind(this);\n        this.clearFile      = this.clearFile.bind(this);\n        this.showModal      = this.showModal.bind(this);\n\n        if (!this.props.user) {\n            return (\n                <div></div>\n            );\n        }\n\n        return (\n            <div className=\"upload-container\">\n                <If condition={this.state.uploadQueue.length > 0}>\n                    <UploadQueueComponent \n                        uploadQueueItems = {this.state.uploadQueue}\n                    />\n                </If>\n                <div className=\"send-message-container\">\n                    <div className=\"upload-type-selector\">\n                        <If condition={this.state.enableEncryption === true}>\n                            <FontAwesomeIcon icon={faUserLock} />\n                        </If>\n                        <p>Upload Files</p>\n                        <Alert className=\"upload-alert\" color=\"info\" isOpen={this.state.showAlert}>\n                            File uploaded successfully\n                        </Alert>\n                    </div>\n                    <If condition={!this.state.file}>\n                        <div className=\"file-selector\">\n                            <input type=\"file\" onChange={this.captureFile.bind(this)} />\n                        </div>\n                        <Else>\n                            <Else>\n                                <div className=\"upload-selection-container\">\n                                    <div>\n                                        <span>\n                                            {this.state.uploadFileName}\n                                        </span>\n                                        <FontAwesomeIcon className=\"clear-upload\" onClick={this.clearFile} icon={faTimesCircle} />\n                                    </div>\n                                    <If condition={this.state.enableEncryption === false}>\n                                        <ButtonDropdown className=\"button-dropdown\" isOpen={this.state.dropdownOpen} toggle={this.toggleDropdown} >\n                                            <DropdownToggle className=\"upload-button\" color=\"info\" disabled={this.state.accountSelected === true}>\n                                                Upload\n                                            </DropdownToggle>\n                                            <DropdownMenu>\n                                                <DropdownItem name=\"upload\" onClick={this.onIPFSSubmit.bind(this)}>\n                                                    Upload\n                                                </DropdownItem>\n                                                <DropdownItem name=\"encrypt\" disabled={this.props.user.contract === \"\"} onClick={this.onToggleEncryption.bind(this)}>\n                                                    Encrypted Upload\n                                                </DropdownItem>\n                                            </DropdownMenu>\n                                        </ButtonDropdown>\n                                    </If>\n                                </div>\n                                <div className=\"upload-container\">\n                                    <If condition={this.state.enableEncryption === true}>\n                                        <div className=\"account-container\">\n                                            <label for=\"ethereum-account-selector\">\n                                                Select recipient ethereum account\n                                            </label>\n                                            <input name=\"ethereum-account-selector\" type=\"text\" placeholder=\"0x...\" onChange={this.verifyRecipient.bind(this)} />\n                                            <If condition={!this.state.verified}>\n                                                <div className=\"not-verified\">\n                                                    <If condition={!this.state.accountSelected}>\n                                                        <p>\n                                                            Select an ethereum account\n                                                        </p>\n                                                        <Else>\n                                                            <FontAwesomeIcon icon={faTimesCircle} />\n                                                            <p>\n                                                                Not a valid account.\n                                                            </p>\n                                                        </Else>\n                                                    </If>\n                                                </div>\n                                                <Else>\n                                                    <div className=\"verified\">\n                                                        <Button color=\"success\" onClick={this.showModal}>\n                                                            Go\n                                                        </Button>\n                                                        <Modal isOpen={this.state.modal} fade={false}\n                                                            toggle={this.showModal} className=\"modal-container\">\n                                                            <ModalHeader toggle={this.showModal}>\n                                                                Encrypt file.\n                                                            </ModalHeader>\n                                                            <ModalBody>\n                                                                You are about to encrypt this file. \n                                                                This will cost ethereum in order to retrieve your encryption keys.\n                                                                Do you wish to proceed?\n                                                            </ModalBody>\n                                                            <ModalFooter className=\"modal-footer-container\">\n                                                                <Button className=\"confirm action-button\" onClick={this.onConfirm.bind(this)} color=\"success\">\n                                                                    Confirm\n                                                                </Button>\n                                                                <Button className=\"cancel action-button\" onClick={this.onCancel.bind(this)} color=\"danger\">\n                                                                    Cancel\n                                                                </Button>\n                                                            </ModalFooter>\n                                                        </Modal>\n                                                    </div>\n                                                </Else>\n                                            </If>\n                                        </div>      \n                                    </If>\n                                </div>   \n                            </Else>\n                        </Else>\n                    </If>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<UploadQueueComponent />, document.getElementById('root'));\nexport default UploadComponent;","import React, { Component } from \"react\";\n\nimport { If, Else, Elif } from 'rc-if-else';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport './upload-queue.component.css';\n\nclass UploadQueueComponent extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        if (!this.props.uploadQueueItems) {\n            return (\n                <div>\n                    \n                </div>\n            );\n        }\n        return (\n            <div className=\"upload-queue-container\">\n                <div className=\"upload-queue-container-header\">\n                    Upload Queue\n                </div>\n                <If condition={this.props.uploadQueueItems.length === 0}>\n                    <div>\n                        No items in queue\n                    </div>\n                    <Else>\n                        <div className=\"upload-queue-container-body\">\n                            <TableContainer component={Paper} className=\"upload-queue-table-container\">\n                                <Table className=\"upload-queue-table\" aria-label=\"Inbox\">\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell>Filename</TableCell>\n                                            <TableCell>Recipient</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {this.props.uploadQueueItems.map((item, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell>{item.filename}</TableCell>\n                                                <TableCell>\n                                                    <span className=\"item-recipient-container\">\n                                                        {item.recipient}\n                                                    </span>\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                        </div>\n                    </Else>\n                </If>\n            </div>\n        );\n    }\n\n}\n\nexport default UploadQueueComponent;","module.exports = __webpack_public_path__ + \"static/media/lock_icon.ba2cf6d5.jpg\";","const IPFS = require('ipfs-http-client');\n\n// const ipfs = new IPFS({\n//     host: '127.0.0.1',\n//     port: 5001,\n//     protocol: 'http'\n// });\n\nconst ipfs = new IPFS({\n    host: 'ec2-3-84-45-253.compute-1.amazonaws.com',\n    port: 5001,\n    protocol: 'http'\n});\n\nexport default ipfs;\n\n","import ipfs from '../ipfs';\nimport { readFile } from 'fs';\n\nexport const IPFSDatabase = {\n    async createDirectory(directoryPath) {\n        return await ipfs.files.mkdir(directoryPath, {parents: true}, (err, res) => {\n            if (err) {\n                console.log('Failed to create directory ' + directoryPath, err);\n            } else {\n                console.log('Created directory ' + directoryPath, res);\n            }\n        });\n    },\n    async readDirectory(directoryPath, callback) {\n        if (callback) {\n            return await ipfs.files.ls(directoryPath, (err, res) => {\n                callback(err, res);\n            });\n        } else {\n            return await ipfs.files.ls(directoryPath);\n        }\n    },\n    async deleteDirectory(directoryPath) {\n        return await ipfs.files.rm(directoryPath, {recursive: true}, (err, res) => {\n            if (err) {\n                console.log('Failed to delete directory', err);\n            } else {\n                console.log('Deleted directory ' + directoryPath + 'successfully.');\n            }\n        });\n    },\n    async addFile(directory, file, filename, callback) {\n        return await ipfs.files.write(\n            directory + filename, file, {create: true}, \n            (err, res) => {\n                callback(err, res);\n            }\n        );\n    },\n    async updateFileWithData(filepath, data) {\n        // read file\n        // append data\n        // delete file\n        // add new file\n        // const fileToUpdate = await ipfs.files.read(filepath);\n        // const newLine = data + '\\n';\n        // fileToUpdate\n\n    },\n    async readFile(filepath, callback) {\n        return await ipfs.files.read(filepath, (err, res) => callback(err, res));\n    },\n    async readFile(filepath) {\n        return await ipfs.files.read(filepath);\n    },\n    async deleteFile(filepath, callback) {\n        return await ipfs.files.rm(filepath, (err, res) => callback(err, res));\n    }\n}","import { LOAD_USER, ADD_TO_QUEUE, REMOVE_FROM_QUEUE, CONTRACT_DEPLOYING } from \"../constants/action-types\";\n\nconst initialState = {\n    user: {\n        alias:    '',\n        contract: '',\n        accounts: [],\n        account:  ''\n    },\n    uploadQueue: [],\n    contractDeployStatus: false\n};\n\nfunction rootReducer(state = initialState, action) {\n    if (action.type == LOAD_USER) {\n        return Object.assign({}, state, {\n            user: action.payload\n        });\n    } else if (action.type == ADD_TO_QUEUE) {\n        return Object.assign({}, state, {\n           uploadQueue: state.uploadQueue.concat(action.payload)\n        });\n    } else if (action.type == REMOVE_FROM_QUEUE) {\n        return Object.assign({}, state, {\n            uploadQueue: state.uploadQueue.filter(function(obj) {\n                return !uploadObjEqualsItem(obj, action.payload);\n            })\n         });\n    } else if (action.type === CONTRACT_DEPLOYING) {\n        return Object.assign({}. state, {\n            contractDeployStatus: !state.contractDeployStatus\n        });\n    }\n    return state;\n}\n\nfunction uploadObjEqualsItem(obj, item) {\n    return obj.startTime === item.startTime \n            && obj.filename === item.filename \n            && obj.recipient === item.recipient;\n}\n\nexport default rootReducer;","import { createStore } from \"redux\";\nimport rootReducer from \"../reducers/index\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from \"react\";\nimport { ContractService } from '../../service/contract.service';\nimport { EncryptionUtils } from '../../encryption/encrypt.service';\nimport { IPFSDatabase } from '../../db/ipfs.db';\nimport {\n  encodeBase64\n} from 'tweetnacl-util';\n\nimport { contractDirectory, uploadDirectory, inboxDirectory } from '../../constants';\nimport { If, Else } from 'rc-if-else';\nimport './generateKeys.component.css';\n\nclass GenerateKeys extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ethereumAccountId: props.ethereumAccountId,\n            alias: \"\",\n            contractAddress: \"\"\n        };\n    }\n\n    generateKeys = async() => {\n        const pairA = await EncryptionUtils.generateKeyPair();\n        let publicKey = pairA.publicKey;\n        let secretKey = pairA.secretKey;\n\n        this.setState({ keysGenerated: true });\n        const publicKeyAsString = encodeBase64(publicKey);\n        const privateKeyAsString = encodeBase64(secretKey);\n        const instance = await ContractService.deployContract(10000, this.props.web3, publicKeyAsString, \n            privateKeyAsString, this.props.ethereumAccountId);\n        const contractAddress = instance.address;\n\n        this.props.action(contractAddress);\n        this.setState({ contractAddress });\n        // create ipfs file and upload\n        const contractDir =  contractDirectory(this.props.user.account);\n        IPFSDatabase.createDirectory(contractDir);\n        await IPFSDatabase.addFile(contractDir, \n            Buffer.from(contractAddress), 'contract.txt', (err, res) => {\n        });\n    }\n    render() {\n        return (\n            <div className=\"generate-keys-container\">\n                <If condition={this.props.ethereumAccountId !== \"\"}>\n                    <If condition={this.state.contractAddress === \"\"}>\n                            <div className=\"keys-container\">\n                                <p>\n                                    Generate encryption keys to allow you to send encrypted files.\n                                    This will cost ethereum.\n                                </p>\n                                <button className=\"btn generate-keys-btn\" onClick={this.generateKeys.bind(this)}>\n                                    Generate Keys\n                                </button>\n                            </div>\n                    </If>\n                </If>\n            </div>\n        );\n    }\n}\n\nexport default GenerateKeys;\n","import { box, randomBytes } from 'tweetnacl';\nimport {\n  decodeUTF8,\n  encodeUTF8,\n  decodeBase64,\n  encodeBase64\n} from 'tweetnacl-util';\n\nexport const EncryptionUtils = {\n    newNonce: function() {\n        return randomBytes(box.nonceLength);  \n    },\n    \n    generateKeyPair: function() {\n        return box.keyPair();\n    },\n\n    /**\n     * Encrypt the json with the given keys\n     * @param {*} secretOrSharedKey \n     * @param {*} json \n     * @param {*} key \n     */\n    encrypt: function(secretOrSharedKey, json, key) {\n        const nonce = this.newNonce();\n        const messageUint8 = decodeUTF8(JSON.stringify(json));\n        const encrypted = key ? box(messageUint8, nonce, key, secretOrSharedKey) \n                                : box.after(messageUint8, nonce, secretOrSharedKey);\n        \n        const fullMessage = new Uint8Array(nonce.length + encrypted.length);\n        fullMessage.set(nonce);\n        fullMessage.set(encrypted, nonce.length);\n\n        const base64FullMessage = encodeBase64(fullMessage);\n        // console.log(base64FullMessage);\n        return base64FullMessage;\n    },\n\n    /**\n     * Decrypt the message with the given keys\n     * @param {*} secretOrSharedKey \n     * @param {*} messageWithNonce \n     * @param {*} key \n     */\n    decrypt: function(secretOrSharedKey, messageWithNonce, key) {\n        const messageWithNonceAsUint8Array = decodeBase64(messageWithNonce);\n        const nonce = messageWithNonceAsUint8Array.slice(0, box.nonceLength);\n        const message = messageWithNonceAsUint8Array.slice(box.nonceLength, \n            messageWithNonce.length);\n\n        const decrypted = key ? box.open(message, nonce, key, secretOrSharedKey)\n                                : box.open.after(message, nonce, secretOrSharedKey);\n\n        if (!decrypted) {\n            throw new Error('Could not decrypt message.');\n        }\n\n        const base64DecryptedMessage = encodeUTF8(decrypted);\n        return JSON.parse(base64DecryptedMessage);\n    },\n\n    async createSharedKeyEncryption(senderEthereumAddress, recipientEthereumAddress, \n        senderContractAddress, recipientContractAddress) {\n        // sender secret key\n        const senderContract = await this.getContract(senderContractAddress);\n        const secretKeySendingAccount = await senderContract.getPrivateKey( { from: senderEthereumAddress });\n\n        // recipient public key\n        const recipientContract = await this.getContract(recipientContractAddress);\n        const publicKeySelectedAccount = await recipientContract.getPublicKey({ from: recipientEthereumAddress });\n\n        const publicKeyRecipient = decodeBase64(publicKeySelectedAccount.logs[0].args['0']);\n        const secretKeySender = decodeBase64(secretKeySendingAccount.logs[0].args['0']);\n        // create shared key\n        return box.before(publicKeyRecipient, secretKeySender);\n    },\n    \n    async createSharedDecryptionKey() {\n        //todo\n        console.log('Not yet implemented'); \n    }\n}","import { LOAD_USER, ADD_TO_QUEUE, REMOVE_FROM_QUEUE, CONTRACT_DEPLOYING } from '../constants/action-types';\n\n/*\nUSER function\n*/\nexport function loadUser(payload) {\n    return { \n        type: LOAD_USER, \n        payload: payload \n    }\n}\n\n/*\n    queueing for uploads\n*/\nexport function addToQueue(payload) {\n    return {\n        type: ADD_TO_QUEUE,\n        payload: payload\n    }\n}\n\nexport function removeFromQueue(payload) {\n    return {\n        type: REMOVE_FROM_QUEUE,\n        payload: payload\n    }   \n}\n\n/*\nqueueing for contract\n*/\nexport function toggleContractStatus() {\n    return {\n        type: CONTRACT_DEPLOYING\n    }\n}\n\n/*\nqueueing for downloads\n*/","export const LOAD_USER          = \"LOAD_USER\";\nexport const ADD_TO_QUEUE       = \"ADD_TO_QUEUE\";\nexport const REMOVE_FROM_QUEUE  = \"REMOVE_FROM_QUEUE\";\nexport const CONTRACT_DEPLOYING = \"CONTRACT_DEPLOYING\";","import {EncryptionUtils} from '../utils/encryption.utils';\nimport truffleContract from '@truffle/contract';\nimport EncryptionKeys from '../contracts/EncryptionKeys.json';\n// import {ContractUtils} from '../utils/contract.utils';\nimport {IPFSDatabase} from '../db/ipfs.db';\nimport { box, randomBytes } from 'tweetnacl';\nimport {\n  decodeUTF8,\n  encodeUTF8,\n  decodeBase64,\n  encodeBase64\n} from 'tweetnacl-util';\n\nimport { contractDirectory } from \"../constants\";\n// 0xd884EFECcF76F743f07F7010a35CE4D37c83A04b\n\nexport const ContractService = {\n\n    /**\n     * Deploy the encryption keys contract\n     * @param {*} _gas \n     * @param {*} sharedA \n     * @param {*} sharedB \n     */\n    async deployContract(web3, publicKey, privateKey, account) {\n        const Contract = truffleContract(EncryptionKeys);\n        Contract.setProvider(web3.currentProvider);\n        return Contract.new(publicKey, privateKey, { from: account });\n    },\n\n    /**\n     * Retrieve a contract by address\n     * @param {*} web3 \n     * @param {*} contractAddress \n     */\n    async getContractByAddress(web3, contractAddress) {\n        const contract = truffleContract(EncryptionKeys);\n        contract.setProvider(web3.currentProvider);\n        return await contract.at(contractAddress);\n    },\n\n    /**\n     * Generate encryption keys and deploy the contract \n     * Makes a single ethereum transaction - to deploy the contract\n     * @param {*} web3 \n     * @param {*} account \n     */\n    async generateKeys(web3, account) {\n        // const gasPrice = 1000000;\n        const pairA = await EncryptionUtils.generateKeyPair();\n        let publicKey = pairA.publicKey;\n        let secretKey = pairA.secretKey;\n\n        const publicKeyAsString = encodeBase64(publicKey);\n        const privateKeyAsString = encodeBase64(secretKey);\n        const instance = await this.deployContract(web3, publicKeyAsString, \n            privateKeyAsString, account);\n        const contractAddress = instance.address;\n        // create ipfs file and upload\n        const directory = contractDirectory(account)\n        // IPFSDatabase.deleteDirectory('/content/' + this.props.ethereumAccountId);\n        // create directory\n        IPFSDatabase.createDirectory(directory);\n        await IPFSDatabase.addFile(directory, Buffer.from(contractAddress), 'contract.txt', \n            (err, res) => {\n                console.log(JSON.stringify(res)); \n            }\n        );\n        return contractAddress;\n    },\n\n    async createSharedKey(web3, secretAddress, publicAddress, \n        senderContractAddress, recipientContractAddress) {\n        // sender secret key\n        const senderContract = await this.getContract(web3, senderContractAddress);\n        const secretKeySendingAccount = await senderContract.getPrivateKey( { from: secretAddress });\n\n        // recipient public key\n        const recipientContract = await this.getContract(web3, recipientContractAddress);\n        const publicKeySelectedAccount = await recipientContract.getPublicKey({ from: publicAddress });\n\n        const publicKeyRecipient = decodeBase64(publicKeySelectedAccount.logs[0].args['0']);\n        const secretKeySender = decodeBase64(secretKeySendingAccount.logs[0].args['0']);\n        // create shared key\n        return box.before(publicKeyRecipient, secretKeySender);\n    },\n    \n    async getContract(web3, address) {\n        const contract = truffleContract(EncryptionKeys);\n        contract.setProvider(web3.currentProvider);\n        return await contract.at(address);\n    }\n}\n\nexport default ContractService;"],"sourceRoot":""}